// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datanode.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_datanode_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_datanode_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_datanode_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_datanode_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_datanode_2eproto;
namespace datanode_proto {
class CheckaliveCMD;
struct CheckaliveCMDDefaultTypeInternal;
extern CheckaliveCMDDefaultTypeInternal _CheckaliveCMD_default_instance_;
class DelInfo;
struct DelInfoDefaultTypeInternal;
extern DelInfoDefaultTypeInternal _DelInfo_default_instance_;
class GetInfo;
struct GetInfoDefaultTypeInternal;
extern GetInfoDefaultTypeInternal _GetInfo_default_instance_;
class RequestResult;
struct RequestResultDefaultTypeInternal;
extern RequestResultDefaultTypeInternal _RequestResult_default_instance_;
class SetInfo;
struct SetInfoDefaultTypeInternal;
extern SetInfoDefaultTypeInternal _SetInfo_default_instance_;
}  // namespace datanode_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::datanode_proto::CheckaliveCMD* Arena::CreateMaybeMessage<::datanode_proto::CheckaliveCMD>(Arena*);
template<> ::datanode_proto::DelInfo* Arena::CreateMaybeMessage<::datanode_proto::DelInfo>(Arena*);
template<> ::datanode_proto::GetInfo* Arena::CreateMaybeMessage<::datanode_proto::GetInfo>(Arena*);
template<> ::datanode_proto::RequestResult* Arena::CreateMaybeMessage<::datanode_proto::RequestResult>(Arena*);
template<> ::datanode_proto::SetInfo* Arena::CreateMaybeMessage<::datanode_proto::SetInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace datanode_proto {

// ===================================================================

class CheckaliveCMD final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:datanode_proto.CheckaliveCMD) */ {
 public:
  inline CheckaliveCMD() : CheckaliveCMD(nullptr) {}
  ~CheckaliveCMD() override;
  explicit PROTOBUF_CONSTEXPR CheckaliveCMD(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckaliveCMD(const CheckaliveCMD& from);
  CheckaliveCMD(CheckaliveCMD&& from) noexcept
    : CheckaliveCMD() {
    *this = ::std::move(from);
  }

  inline CheckaliveCMD& operator=(const CheckaliveCMD& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckaliveCMD& operator=(CheckaliveCMD&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckaliveCMD& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckaliveCMD* internal_default_instance() {
    return reinterpret_cast<const CheckaliveCMD*>(
               &_CheckaliveCMD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CheckaliveCMD& a, CheckaliveCMD& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckaliveCMD* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckaliveCMD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckaliveCMD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckaliveCMD>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckaliveCMD& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CheckaliveCMD& from) {
    CheckaliveCMD::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckaliveCMD* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datanode_proto.CheckaliveCMD";
  }
  protected:
  explicit CheckaliveCMD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:datanode_proto.CheckaliveCMD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datanode_2eproto;
};
// -------------------------------------------------------------------

class RequestResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:datanode_proto.RequestResult) */ {
 public:
  inline RequestResult() : RequestResult(nullptr) {}
  ~RequestResult() override;
  explicit PROTOBUF_CONSTEXPR RequestResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestResult(const RequestResult& from);
  RequestResult(RequestResult&& from) noexcept
    : RequestResult() {
    *this = ::std::move(from);
  }

  inline RequestResult& operator=(const RequestResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestResult& operator=(RequestResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestResult* internal_default_instance() {
    return reinterpret_cast<const RequestResult*>(
               &_RequestResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RequestResult& a, RequestResult& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestResult& from) {
    RequestResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datanode_proto.RequestResult";
  }
  protected:
  explicit RequestResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kValuesizebytesFieldNumber = 2,
  };
  // bool message = 1;
  void clear_message();
  bool message() const;
  void set_message(bool value);
  private:
  bool _internal_message() const;
  void _internal_set_message(bool value);
  public:

  // int32 valuesizebytes = 2;
  void clear_valuesizebytes();
  int32_t valuesizebytes() const;
  void set_valuesizebytes(int32_t value);
  private:
  int32_t _internal_valuesizebytes() const;
  void _internal_set_valuesizebytes(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:datanode_proto.RequestResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool message_;
    int32_t valuesizebytes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datanode_2eproto;
};
// -------------------------------------------------------------------

class SetInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:datanode_proto.SetInfo) */ {
 public:
  inline SetInfo() : SetInfo(nullptr) {}
  ~SetInfo() override;
  explicit PROTOBUF_CONSTEXPR SetInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetInfo(const SetInfo& from);
  SetInfo(SetInfo&& from) noexcept
    : SetInfo() {
    *this = ::std::move(from);
  }

  inline SetInfo& operator=(const SetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetInfo& operator=(SetInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetInfo* internal_default_instance() {
    return reinterpret_cast<const SetInfo*>(
               &_SetInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetInfo& a, SetInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SetInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetInfo& from) {
    SetInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datanode_proto.SetInfo";
  }
  protected:
  explicit SetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockKeyFieldNumber = 1,
    kProxyIpFieldNumber = 4,
    kBlockSizeFieldNumber = 2,
    kBlockIdFieldNumber = 3,
    kProxyPortFieldNumber = 5,
    kIspullFieldNumber = 6,
  };
  // string block_key = 1;
  void clear_block_key();
  const std::string& block_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_block_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_block_key();
  PROTOBUF_NODISCARD std::string* release_block_key();
  void set_allocated_block_key(std::string* block_key);
  private:
  const std::string& _internal_block_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_key(const std::string& value);
  std::string* _internal_mutable_block_key();
  public:

  // string proxy_ip = 4;
  void clear_proxy_ip();
  const std::string& proxy_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proxy_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proxy_ip();
  PROTOBUF_NODISCARD std::string* release_proxy_ip();
  void set_allocated_proxy_ip(std::string* proxy_ip);
  private:
  const std::string& _internal_proxy_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proxy_ip(const std::string& value);
  std::string* _internal_mutable_proxy_ip();
  public:

  // int32 block_size = 2;
  void clear_block_size();
  int32_t block_size() const;
  void set_block_size(int32_t value);
  private:
  int32_t _internal_block_size() const;
  void _internal_set_block_size(int32_t value);
  public:

  // int32 block_id = 3;
  void clear_block_id();
  int32_t block_id() const;
  void set_block_id(int32_t value);
  private:
  int32_t _internal_block_id() const;
  void _internal_set_block_id(int32_t value);
  public:

  // int32 proxy_port = 5;
  void clear_proxy_port();
  int32_t proxy_port() const;
  void set_proxy_port(int32_t value);
  private:
  int32_t _internal_proxy_port() const;
  void _internal_set_proxy_port(int32_t value);
  public:

  // bool ispull = 6;
  void clear_ispull();
  bool ispull() const;
  void set_ispull(bool value);
  private:
  bool _internal_ispull() const;
  void _internal_set_ispull(bool value);
  public:

  // @@protoc_insertion_point(class_scope:datanode_proto.SetInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proxy_ip_;
    int32_t block_size_;
    int32_t block_id_;
    int32_t proxy_port_;
    bool ispull_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datanode_2eproto;
};
// -------------------------------------------------------------------

class GetInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:datanode_proto.GetInfo) */ {
 public:
  inline GetInfo() : GetInfo(nullptr) {}
  ~GetInfo() override;
  explicit PROTOBUF_CONSTEXPR GetInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetInfo(const GetInfo& from);
  GetInfo(GetInfo&& from) noexcept
    : GetInfo() {
    *this = ::std::move(from);
  }

  inline GetInfo& operator=(const GetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInfo& operator=(GetInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetInfo* internal_default_instance() {
    return reinterpret_cast<const GetInfo*>(
               &_GetInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetInfo& a, GetInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetInfo& from) {
    GetInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datanode_proto.GetInfo";
  }
  protected:
  explicit GetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockKeyFieldNumber = 1,
    kProxyIpFieldNumber = 4,
    kBlockSizeFieldNumber = 2,
    kBlockIdFieldNumber = 3,
    kProxyPortFieldNumber = 5,
  };
  // string block_key = 1;
  void clear_block_key();
  const std::string& block_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_block_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_block_key();
  PROTOBUF_NODISCARD std::string* release_block_key();
  void set_allocated_block_key(std::string* block_key);
  private:
  const std::string& _internal_block_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_key(const std::string& value);
  std::string* _internal_mutable_block_key();
  public:

  // string proxy_ip = 4;
  void clear_proxy_ip();
  const std::string& proxy_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proxy_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proxy_ip();
  PROTOBUF_NODISCARD std::string* release_proxy_ip();
  void set_allocated_proxy_ip(std::string* proxy_ip);
  private:
  const std::string& _internal_proxy_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proxy_ip(const std::string& value);
  std::string* _internal_mutable_proxy_ip();
  public:

  // int32 block_size = 2;
  void clear_block_size();
  int32_t block_size() const;
  void set_block_size(int32_t value);
  private:
  int32_t _internal_block_size() const;
  void _internal_set_block_size(int32_t value);
  public:

  // int32 block_id = 3;
  void clear_block_id();
  int32_t block_id() const;
  void set_block_id(int32_t value);
  private:
  int32_t _internal_block_id() const;
  void _internal_set_block_id(int32_t value);
  public:

  // int32 proxy_port = 5;
  void clear_proxy_port();
  int32_t proxy_port() const;
  void set_proxy_port(int32_t value);
  private:
  int32_t _internal_proxy_port() const;
  void _internal_set_proxy_port(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:datanode_proto.GetInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proxy_ip_;
    int32_t block_size_;
    int32_t block_id_;
    int32_t proxy_port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datanode_2eproto;
};
// -------------------------------------------------------------------

class DelInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:datanode_proto.DelInfo) */ {
 public:
  inline DelInfo() : DelInfo(nullptr) {}
  ~DelInfo() override;
  explicit PROTOBUF_CONSTEXPR DelInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DelInfo(const DelInfo& from);
  DelInfo(DelInfo&& from) noexcept
    : DelInfo() {
    *this = ::std::move(from);
  }

  inline DelInfo& operator=(const DelInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelInfo& operator=(DelInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelInfo* internal_default_instance() {
    return reinterpret_cast<const DelInfo*>(
               &_DelInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DelInfo& a, DelInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DelInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DelInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DelInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DelInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DelInfo& from) {
    DelInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "datanode_proto.DelInfo";
  }
  protected:
  explicit DelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockKeyFieldNumber = 1,
  };
  // string block_key = 1;
  void clear_block_key();
  const std::string& block_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_block_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_block_key();
  PROTOBUF_NODISCARD std::string* release_block_key();
  void set_allocated_block_key(std::string* block_key);
  private:
  const std::string& _internal_block_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_key(const std::string& value);
  std::string* _internal_mutable_block_key();
  public:

  // @@protoc_insertion_point(class_scope:datanode_proto.DelInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datanode_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CheckaliveCMD

// string name = 1;
inline void CheckaliveCMD::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CheckaliveCMD::name() const {
  // @@protoc_insertion_point(field_get:datanode_proto.CheckaliveCMD.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckaliveCMD::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:datanode_proto.CheckaliveCMD.name)
}
inline std::string* CheckaliveCMD::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:datanode_proto.CheckaliveCMD.name)
  return _s;
}
inline const std::string& CheckaliveCMD::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CheckaliveCMD::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CheckaliveCMD::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CheckaliveCMD::release_name() {
  // @@protoc_insertion_point(field_release:datanode_proto.CheckaliveCMD.name)
  return _impl_.name_.Release();
}
inline void CheckaliveCMD::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:datanode_proto.CheckaliveCMD.name)
}

// -------------------------------------------------------------------

// RequestResult

// bool message = 1;
inline void RequestResult::clear_message() {
  _impl_.message_ = false;
}
inline bool RequestResult::_internal_message() const {
  return _impl_.message_;
}
inline bool RequestResult::message() const {
  // @@protoc_insertion_point(field_get:datanode_proto.RequestResult.message)
  return _internal_message();
}
inline void RequestResult::_internal_set_message(bool value) {
  
  _impl_.message_ = value;
}
inline void RequestResult::set_message(bool value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:datanode_proto.RequestResult.message)
}

// int32 valuesizebytes = 2;
inline void RequestResult::clear_valuesizebytes() {
  _impl_.valuesizebytes_ = 0;
}
inline int32_t RequestResult::_internal_valuesizebytes() const {
  return _impl_.valuesizebytes_;
}
inline int32_t RequestResult::valuesizebytes() const {
  // @@protoc_insertion_point(field_get:datanode_proto.RequestResult.valuesizebytes)
  return _internal_valuesizebytes();
}
inline void RequestResult::_internal_set_valuesizebytes(int32_t value) {
  
  _impl_.valuesizebytes_ = value;
}
inline void RequestResult::set_valuesizebytes(int32_t value) {
  _internal_set_valuesizebytes(value);
  // @@protoc_insertion_point(field_set:datanode_proto.RequestResult.valuesizebytes)
}

// -------------------------------------------------------------------

// SetInfo

// string block_key = 1;
inline void SetInfo::clear_block_key() {
  _impl_.block_key_.ClearToEmpty();
}
inline const std::string& SetInfo::block_key() const {
  // @@protoc_insertion_point(field_get:datanode_proto.SetInfo.block_key)
  return _internal_block_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetInfo::set_block_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.block_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:datanode_proto.SetInfo.block_key)
}
inline std::string* SetInfo::mutable_block_key() {
  std::string* _s = _internal_mutable_block_key();
  // @@protoc_insertion_point(field_mutable:datanode_proto.SetInfo.block_key)
  return _s;
}
inline const std::string& SetInfo::_internal_block_key() const {
  return _impl_.block_key_.Get();
}
inline void SetInfo::_internal_set_block_key(const std::string& value) {
  
  _impl_.block_key_.Set(value, GetArenaForAllocation());
}
inline std::string* SetInfo::_internal_mutable_block_key() {
  
  return _impl_.block_key_.Mutable(GetArenaForAllocation());
}
inline std::string* SetInfo::release_block_key() {
  // @@protoc_insertion_point(field_release:datanode_proto.SetInfo.block_key)
  return _impl_.block_key_.Release();
}
inline void SetInfo::set_allocated_block_key(std::string* block_key) {
  if (block_key != nullptr) {
    
  } else {
    
  }
  _impl_.block_key_.SetAllocated(block_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.block_key_.IsDefault()) {
    _impl_.block_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:datanode_proto.SetInfo.block_key)
}

// int32 block_size = 2;
inline void SetInfo::clear_block_size() {
  _impl_.block_size_ = 0;
}
inline int32_t SetInfo::_internal_block_size() const {
  return _impl_.block_size_;
}
inline int32_t SetInfo::block_size() const {
  // @@protoc_insertion_point(field_get:datanode_proto.SetInfo.block_size)
  return _internal_block_size();
}
inline void SetInfo::_internal_set_block_size(int32_t value) {
  
  _impl_.block_size_ = value;
}
inline void SetInfo::set_block_size(int32_t value) {
  _internal_set_block_size(value);
  // @@protoc_insertion_point(field_set:datanode_proto.SetInfo.block_size)
}

// int32 block_id = 3;
inline void SetInfo::clear_block_id() {
  _impl_.block_id_ = 0;
}
inline int32_t SetInfo::_internal_block_id() const {
  return _impl_.block_id_;
}
inline int32_t SetInfo::block_id() const {
  // @@protoc_insertion_point(field_get:datanode_proto.SetInfo.block_id)
  return _internal_block_id();
}
inline void SetInfo::_internal_set_block_id(int32_t value) {
  
  _impl_.block_id_ = value;
}
inline void SetInfo::set_block_id(int32_t value) {
  _internal_set_block_id(value);
  // @@protoc_insertion_point(field_set:datanode_proto.SetInfo.block_id)
}

// string proxy_ip = 4;
inline void SetInfo::clear_proxy_ip() {
  _impl_.proxy_ip_.ClearToEmpty();
}
inline const std::string& SetInfo::proxy_ip() const {
  // @@protoc_insertion_point(field_get:datanode_proto.SetInfo.proxy_ip)
  return _internal_proxy_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetInfo::set_proxy_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.proxy_ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:datanode_proto.SetInfo.proxy_ip)
}
inline std::string* SetInfo::mutable_proxy_ip() {
  std::string* _s = _internal_mutable_proxy_ip();
  // @@protoc_insertion_point(field_mutable:datanode_proto.SetInfo.proxy_ip)
  return _s;
}
inline const std::string& SetInfo::_internal_proxy_ip() const {
  return _impl_.proxy_ip_.Get();
}
inline void SetInfo::_internal_set_proxy_ip(const std::string& value) {
  
  _impl_.proxy_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* SetInfo::_internal_mutable_proxy_ip() {
  
  return _impl_.proxy_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* SetInfo::release_proxy_ip() {
  // @@protoc_insertion_point(field_release:datanode_proto.SetInfo.proxy_ip)
  return _impl_.proxy_ip_.Release();
}
inline void SetInfo::set_allocated_proxy_ip(std::string* proxy_ip) {
  if (proxy_ip != nullptr) {
    
  } else {
    
  }
  _impl_.proxy_ip_.SetAllocated(proxy_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.proxy_ip_.IsDefault()) {
    _impl_.proxy_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:datanode_proto.SetInfo.proxy_ip)
}

// int32 proxy_port = 5;
inline void SetInfo::clear_proxy_port() {
  _impl_.proxy_port_ = 0;
}
inline int32_t SetInfo::_internal_proxy_port() const {
  return _impl_.proxy_port_;
}
inline int32_t SetInfo::proxy_port() const {
  // @@protoc_insertion_point(field_get:datanode_proto.SetInfo.proxy_port)
  return _internal_proxy_port();
}
inline void SetInfo::_internal_set_proxy_port(int32_t value) {
  
  _impl_.proxy_port_ = value;
}
inline void SetInfo::set_proxy_port(int32_t value) {
  _internal_set_proxy_port(value);
  // @@protoc_insertion_point(field_set:datanode_proto.SetInfo.proxy_port)
}

// bool ispull = 6;
inline void SetInfo::clear_ispull() {
  _impl_.ispull_ = false;
}
inline bool SetInfo::_internal_ispull() const {
  return _impl_.ispull_;
}
inline bool SetInfo::ispull() const {
  // @@protoc_insertion_point(field_get:datanode_proto.SetInfo.ispull)
  return _internal_ispull();
}
inline void SetInfo::_internal_set_ispull(bool value) {
  
  _impl_.ispull_ = value;
}
inline void SetInfo::set_ispull(bool value) {
  _internal_set_ispull(value);
  // @@protoc_insertion_point(field_set:datanode_proto.SetInfo.ispull)
}

// -------------------------------------------------------------------

// GetInfo

// string block_key = 1;
inline void GetInfo::clear_block_key() {
  _impl_.block_key_.ClearToEmpty();
}
inline const std::string& GetInfo::block_key() const {
  // @@protoc_insertion_point(field_get:datanode_proto.GetInfo.block_key)
  return _internal_block_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetInfo::set_block_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.block_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:datanode_proto.GetInfo.block_key)
}
inline std::string* GetInfo::mutable_block_key() {
  std::string* _s = _internal_mutable_block_key();
  // @@protoc_insertion_point(field_mutable:datanode_proto.GetInfo.block_key)
  return _s;
}
inline const std::string& GetInfo::_internal_block_key() const {
  return _impl_.block_key_.Get();
}
inline void GetInfo::_internal_set_block_key(const std::string& value) {
  
  _impl_.block_key_.Set(value, GetArenaForAllocation());
}
inline std::string* GetInfo::_internal_mutable_block_key() {
  
  return _impl_.block_key_.Mutable(GetArenaForAllocation());
}
inline std::string* GetInfo::release_block_key() {
  // @@protoc_insertion_point(field_release:datanode_proto.GetInfo.block_key)
  return _impl_.block_key_.Release();
}
inline void GetInfo::set_allocated_block_key(std::string* block_key) {
  if (block_key != nullptr) {
    
  } else {
    
  }
  _impl_.block_key_.SetAllocated(block_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.block_key_.IsDefault()) {
    _impl_.block_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:datanode_proto.GetInfo.block_key)
}

// int32 block_size = 2;
inline void GetInfo::clear_block_size() {
  _impl_.block_size_ = 0;
}
inline int32_t GetInfo::_internal_block_size() const {
  return _impl_.block_size_;
}
inline int32_t GetInfo::block_size() const {
  // @@protoc_insertion_point(field_get:datanode_proto.GetInfo.block_size)
  return _internal_block_size();
}
inline void GetInfo::_internal_set_block_size(int32_t value) {
  
  _impl_.block_size_ = value;
}
inline void GetInfo::set_block_size(int32_t value) {
  _internal_set_block_size(value);
  // @@protoc_insertion_point(field_set:datanode_proto.GetInfo.block_size)
}

// int32 block_id = 3;
inline void GetInfo::clear_block_id() {
  _impl_.block_id_ = 0;
}
inline int32_t GetInfo::_internal_block_id() const {
  return _impl_.block_id_;
}
inline int32_t GetInfo::block_id() const {
  // @@protoc_insertion_point(field_get:datanode_proto.GetInfo.block_id)
  return _internal_block_id();
}
inline void GetInfo::_internal_set_block_id(int32_t value) {
  
  _impl_.block_id_ = value;
}
inline void GetInfo::set_block_id(int32_t value) {
  _internal_set_block_id(value);
  // @@protoc_insertion_point(field_set:datanode_proto.GetInfo.block_id)
}

// string proxy_ip = 4;
inline void GetInfo::clear_proxy_ip() {
  _impl_.proxy_ip_.ClearToEmpty();
}
inline const std::string& GetInfo::proxy_ip() const {
  // @@protoc_insertion_point(field_get:datanode_proto.GetInfo.proxy_ip)
  return _internal_proxy_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetInfo::set_proxy_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.proxy_ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:datanode_proto.GetInfo.proxy_ip)
}
inline std::string* GetInfo::mutable_proxy_ip() {
  std::string* _s = _internal_mutable_proxy_ip();
  // @@protoc_insertion_point(field_mutable:datanode_proto.GetInfo.proxy_ip)
  return _s;
}
inline const std::string& GetInfo::_internal_proxy_ip() const {
  return _impl_.proxy_ip_.Get();
}
inline void GetInfo::_internal_set_proxy_ip(const std::string& value) {
  
  _impl_.proxy_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* GetInfo::_internal_mutable_proxy_ip() {
  
  return _impl_.proxy_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* GetInfo::release_proxy_ip() {
  // @@protoc_insertion_point(field_release:datanode_proto.GetInfo.proxy_ip)
  return _impl_.proxy_ip_.Release();
}
inline void GetInfo::set_allocated_proxy_ip(std::string* proxy_ip) {
  if (proxy_ip != nullptr) {
    
  } else {
    
  }
  _impl_.proxy_ip_.SetAllocated(proxy_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.proxy_ip_.IsDefault()) {
    _impl_.proxy_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:datanode_proto.GetInfo.proxy_ip)
}

// int32 proxy_port = 5;
inline void GetInfo::clear_proxy_port() {
  _impl_.proxy_port_ = 0;
}
inline int32_t GetInfo::_internal_proxy_port() const {
  return _impl_.proxy_port_;
}
inline int32_t GetInfo::proxy_port() const {
  // @@protoc_insertion_point(field_get:datanode_proto.GetInfo.proxy_port)
  return _internal_proxy_port();
}
inline void GetInfo::_internal_set_proxy_port(int32_t value) {
  
  _impl_.proxy_port_ = value;
}
inline void GetInfo::set_proxy_port(int32_t value) {
  _internal_set_proxy_port(value);
  // @@protoc_insertion_point(field_set:datanode_proto.GetInfo.proxy_port)
}

// -------------------------------------------------------------------

// DelInfo

// string block_key = 1;
inline void DelInfo::clear_block_key() {
  _impl_.block_key_.ClearToEmpty();
}
inline const std::string& DelInfo::block_key() const {
  // @@protoc_insertion_point(field_get:datanode_proto.DelInfo.block_key)
  return _internal_block_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DelInfo::set_block_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.block_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:datanode_proto.DelInfo.block_key)
}
inline std::string* DelInfo::mutable_block_key() {
  std::string* _s = _internal_mutable_block_key();
  // @@protoc_insertion_point(field_mutable:datanode_proto.DelInfo.block_key)
  return _s;
}
inline const std::string& DelInfo::_internal_block_key() const {
  return _impl_.block_key_.Get();
}
inline void DelInfo::_internal_set_block_key(const std::string& value) {
  
  _impl_.block_key_.Set(value, GetArenaForAllocation());
}
inline std::string* DelInfo::_internal_mutable_block_key() {
  
  return _impl_.block_key_.Mutable(GetArenaForAllocation());
}
inline std::string* DelInfo::release_block_key() {
  // @@protoc_insertion_point(field_release:datanode_proto.DelInfo.block_key)
  return _impl_.block_key_.Release();
}
inline void DelInfo::set_allocated_block_key(std::string* block_key) {
  if (block_key != nullptr) {
    
  } else {
    
  }
  _impl_.block_key_.SetAllocated(block_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.block_key_.IsDefault()) {
    _impl_.block_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:datanode_proto.DelInfo.block_key)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace datanode_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_datanode_2eproto
