// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coordinator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_coordinator_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_coordinator_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_coordinator_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_coordinator_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_coordinator_2eproto;
namespace coordinator_proto {
class AskIfSuccess;
struct AskIfSuccessDefaultTypeInternal;
extern AskIfSuccessDefaultTypeInternal _AskIfSuccess_default_instance_;
class CommitAbortKey;
struct CommitAbortKeyDefaultTypeInternal;
extern CommitAbortKeyDefaultTypeInternal _CommitAbortKey_default_instance_;
class KeyAndClientIP;
struct KeyAndClientIPDefaultTypeInternal;
extern KeyAndClientIPDefaultTypeInternal _KeyAndClientIP_default_instance_;
class KeyFromClient;
struct KeyFromClientDefaultTypeInternal;
extern KeyFromClientDefaultTypeInternal _KeyFromClient_default_instance_;
class NumberOfStripesToMerge;
struct NumberOfStripesToMergeDefaultTypeInternal;
extern NumberOfStripesToMergeDefaultTypeInternal _NumberOfStripesToMerge_default_instance_;
class Parameter;
struct ParameterDefaultTypeInternal;
extern ParameterDefaultTypeInternal _Parameter_default_instance_;
class RepIfDeling;
struct RepIfDelingDefaultTypeInternal;
extern RepIfDelingDefaultTypeInternal _RepIfDeling_default_instance_;
class RepIfGetSuccess;
struct RepIfGetSuccessDefaultTypeInternal;
extern RepIfGetSuccessDefaultTypeInternal _RepIfGetSuccess_default_instance_;
class RepIfMerged;
struct RepIfMergedDefaultTypeInternal;
extern RepIfMergedDefaultTypeInternal _RepIfMerged_default_instance_;
class RepIfSetParaSuccess;
struct RepIfSetParaSuccessDefaultTypeInternal;
extern RepIfSetParaSuccessDefaultTypeInternal _RepIfSetParaSuccess_default_instance_;
class RepIfSuccess;
struct RepIfSuccessDefaultTypeInternal;
extern RepIfSuccessDefaultTypeInternal _RepIfSuccess_default_instance_;
class RepStripeIds;
struct RepStripeIdsDefaultTypeInternal;
extern RepStripeIdsDefaultTypeInternal _RepStripeIds_default_instance_;
class ReplyFromCoordinator;
struct ReplyFromCoordinatorDefaultTypeInternal;
extern ReplyFromCoordinatorDefaultTypeInternal _ReplyFromCoordinator_default_instance_;
class ReplyProxyIPPort;
struct ReplyProxyIPPortDefaultTypeInternal;
extern ReplyProxyIPPortDefaultTypeInternal _ReplyProxyIPPort_default_instance_;
class RequestProxyIPPort;
struct RequestProxyIPPortDefaultTypeInternal;
extern RequestProxyIPPortDefaultTypeInternal _RequestProxyIPPort_default_instance_;
class RequestToCoordinator;
struct RequestToCoordinatorDefaultTypeInternal;
extern RequestToCoordinatorDefaultTypeInternal _RequestToCoordinator_default_instance_;
class StripeIdFromClient;
struct StripeIdFromClientDefaultTypeInternal;
extern StripeIdFromClientDefaultTypeInternal _StripeIdFromClient_default_instance_;
}  // namespace coordinator_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::coordinator_proto::AskIfSuccess* Arena::CreateMaybeMessage<::coordinator_proto::AskIfSuccess>(Arena*);
template<> ::coordinator_proto::CommitAbortKey* Arena::CreateMaybeMessage<::coordinator_proto::CommitAbortKey>(Arena*);
template<> ::coordinator_proto::KeyAndClientIP* Arena::CreateMaybeMessage<::coordinator_proto::KeyAndClientIP>(Arena*);
template<> ::coordinator_proto::KeyFromClient* Arena::CreateMaybeMessage<::coordinator_proto::KeyFromClient>(Arena*);
template<> ::coordinator_proto::NumberOfStripesToMerge* Arena::CreateMaybeMessage<::coordinator_proto::NumberOfStripesToMerge>(Arena*);
template<> ::coordinator_proto::Parameter* Arena::CreateMaybeMessage<::coordinator_proto::Parameter>(Arena*);
template<> ::coordinator_proto::RepIfDeling* Arena::CreateMaybeMessage<::coordinator_proto::RepIfDeling>(Arena*);
template<> ::coordinator_proto::RepIfGetSuccess* Arena::CreateMaybeMessage<::coordinator_proto::RepIfGetSuccess>(Arena*);
template<> ::coordinator_proto::RepIfMerged* Arena::CreateMaybeMessage<::coordinator_proto::RepIfMerged>(Arena*);
template<> ::coordinator_proto::RepIfSetParaSuccess* Arena::CreateMaybeMessage<::coordinator_proto::RepIfSetParaSuccess>(Arena*);
template<> ::coordinator_proto::RepIfSuccess* Arena::CreateMaybeMessage<::coordinator_proto::RepIfSuccess>(Arena*);
template<> ::coordinator_proto::RepStripeIds* Arena::CreateMaybeMessage<::coordinator_proto::RepStripeIds>(Arena*);
template<> ::coordinator_proto::ReplyFromCoordinator* Arena::CreateMaybeMessage<::coordinator_proto::ReplyFromCoordinator>(Arena*);
template<> ::coordinator_proto::ReplyProxyIPPort* Arena::CreateMaybeMessage<::coordinator_proto::ReplyProxyIPPort>(Arena*);
template<> ::coordinator_proto::RequestProxyIPPort* Arena::CreateMaybeMessage<::coordinator_proto::RequestProxyIPPort>(Arena*);
template<> ::coordinator_proto::RequestToCoordinator* Arena::CreateMaybeMessage<::coordinator_proto::RequestToCoordinator>(Arena*);
template<> ::coordinator_proto::StripeIdFromClient* Arena::CreateMaybeMessage<::coordinator_proto::StripeIdFromClient>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace coordinator_proto {

// ===================================================================

class Parameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator_proto.Parameter) */ {
 public:
  inline Parameter() : Parameter(nullptr) {}
  ~Parameter() override;
  explicit PROTOBUF_CONSTEXPR Parameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Parameter(const Parameter& from);
  Parameter(Parameter&& from) noexcept
    : Parameter() {
    *this = ::std::move(from);
  }

  inline Parameter& operator=(const Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Parameter& operator=(Parameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Parameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const Parameter* internal_default_instance() {
    return reinterpret_cast<const Parameter*>(
               &_Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Parameter& a, Parameter& b) {
    a.Swap(&b);
  }
  inline void Swap(Parameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Parameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Parameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Parameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Parameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Parameter& from) {
    Parameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Parameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator_proto.Parameter";
  }
  protected:
  explicit Parameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartialDecodingFieldNumber = 1,
    kEncodetypeFieldNumber = 2,
    kSStripePlacementtypeFieldNumber = 3,
    kMStripePlacementtypeFieldNumber = 4,
    kKDatablockFieldNumber = 5,
    kLLocalparityblockFieldNumber = 6,
    kGMGlobalparityblockFieldNumber = 7,
    kBDatapergroupFieldNumber = 8,
    kXStripepermergegroupFieldNumber = 9,
  };
  // bool partial_decoding = 1;
  void clear_partial_decoding();
  bool partial_decoding() const;
  void set_partial_decoding(bool value);
  private:
  bool _internal_partial_decoding() const;
  void _internal_set_partial_decoding(bool value);
  public:

  // int32 encodetype = 2;
  void clear_encodetype();
  int32_t encodetype() const;
  void set_encodetype(int32_t value);
  private:
  int32_t _internal_encodetype() const;
  void _internal_set_encodetype(int32_t value);
  public:

  // int32 s_stripe_placementtype = 3;
  void clear_s_stripe_placementtype();
  int32_t s_stripe_placementtype() const;
  void set_s_stripe_placementtype(int32_t value);
  private:
  int32_t _internal_s_stripe_placementtype() const;
  void _internal_set_s_stripe_placementtype(int32_t value);
  public:

  // int32 m_stripe_placementtype = 4;
  void clear_m_stripe_placementtype();
  int32_t m_stripe_placementtype() const;
  void set_m_stripe_placementtype(int32_t value);
  private:
  int32_t _internal_m_stripe_placementtype() const;
  void _internal_set_m_stripe_placementtype(int32_t value);
  public:

  // int32 k_datablock = 5;
  void clear_k_datablock();
  int32_t k_datablock() const;
  void set_k_datablock(int32_t value);
  private:
  int32_t _internal_k_datablock() const;
  void _internal_set_k_datablock(int32_t value);
  public:

  // int32 l_localparityblock = 6;
  void clear_l_localparityblock();
  int32_t l_localparityblock() const;
  void set_l_localparityblock(int32_t value);
  private:
  int32_t _internal_l_localparityblock() const;
  void _internal_set_l_localparityblock(int32_t value);
  public:

  // int32 g_m_globalparityblock = 7;
  void clear_g_m_globalparityblock();
  int32_t g_m_globalparityblock() const;
  void set_g_m_globalparityblock(int32_t value);
  private:
  int32_t _internal_g_m_globalparityblock() const;
  void _internal_set_g_m_globalparityblock(int32_t value);
  public:

  // int32 b_datapergroup = 8;
  void clear_b_datapergroup();
  int32_t b_datapergroup() const;
  void set_b_datapergroup(int32_t value);
  private:
  int32_t _internal_b_datapergroup() const;
  void _internal_set_b_datapergroup(int32_t value);
  public:

  // int32 x_stripepermergegroup = 9;
  void clear_x_stripepermergegroup();
  int32_t x_stripepermergegroup() const;
  void set_x_stripepermergegroup(int32_t value);
  private:
  int32_t _internal_x_stripepermergegroup() const;
  void _internal_set_x_stripepermergegroup(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:coordinator_proto.Parameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool partial_decoding_;
    int32_t encodetype_;
    int32_t s_stripe_placementtype_;
    int32_t m_stripe_placementtype_;
    int32_t k_datablock_;
    int32_t l_localparityblock_;
    int32_t g_m_globalparityblock_;
    int32_t b_datapergroup_;
    int32_t x_stripepermergegroup_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class RepIfSetParaSuccess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator_proto.RepIfSetParaSuccess) */ {
 public:
  inline RepIfSetParaSuccess() : RepIfSetParaSuccess(nullptr) {}
  ~RepIfSetParaSuccess() override;
  explicit PROTOBUF_CONSTEXPR RepIfSetParaSuccess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RepIfSetParaSuccess(const RepIfSetParaSuccess& from);
  RepIfSetParaSuccess(RepIfSetParaSuccess&& from) noexcept
    : RepIfSetParaSuccess() {
    *this = ::std::move(from);
  }

  inline RepIfSetParaSuccess& operator=(const RepIfSetParaSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepIfSetParaSuccess& operator=(RepIfSetParaSuccess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RepIfSetParaSuccess& default_instance() {
    return *internal_default_instance();
  }
  static inline const RepIfSetParaSuccess* internal_default_instance() {
    return reinterpret_cast<const RepIfSetParaSuccess*>(
               &_RepIfSetParaSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RepIfSetParaSuccess& a, RepIfSetParaSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(RepIfSetParaSuccess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RepIfSetParaSuccess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RepIfSetParaSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RepIfSetParaSuccess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RepIfSetParaSuccess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RepIfSetParaSuccess& from) {
    RepIfSetParaSuccess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepIfSetParaSuccess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator_proto.RepIfSetParaSuccess";
  }
  protected:
  explicit RepIfSetParaSuccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIfsetparameterFieldNumber = 1,
  };
  // bool ifsetparameter = 1;
  void clear_ifsetparameter();
  bool ifsetparameter() const;
  void set_ifsetparameter(bool value);
  private:
  bool _internal_ifsetparameter() const;
  void _internal_set_ifsetparameter(bool value);
  public:

  // @@protoc_insertion_point(class_scope:coordinator_proto.RepIfSetParaSuccess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool ifsetparameter_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class RequestToCoordinator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator_proto.RequestToCoordinator) */ {
 public:
  inline RequestToCoordinator() : RequestToCoordinator(nullptr) {}
  ~RequestToCoordinator() override;
  explicit PROTOBUF_CONSTEXPR RequestToCoordinator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestToCoordinator(const RequestToCoordinator& from);
  RequestToCoordinator(RequestToCoordinator&& from) noexcept
    : RequestToCoordinator() {
    *this = ::std::move(from);
  }

  inline RequestToCoordinator& operator=(const RequestToCoordinator& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestToCoordinator& operator=(RequestToCoordinator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestToCoordinator& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestToCoordinator* internal_default_instance() {
    return reinterpret_cast<const RequestToCoordinator*>(
               &_RequestToCoordinator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RequestToCoordinator& a, RequestToCoordinator& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestToCoordinator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestToCoordinator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestToCoordinator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestToCoordinator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestToCoordinator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestToCoordinator& from) {
    RequestToCoordinator::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestToCoordinator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator_proto.RequestToCoordinator";
  }
  protected:
  explicit RequestToCoordinator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:coordinator_proto.RequestToCoordinator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class ReplyFromCoordinator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator_proto.ReplyFromCoordinator) */ {
 public:
  inline ReplyFromCoordinator() : ReplyFromCoordinator(nullptr) {}
  ~ReplyFromCoordinator() override;
  explicit PROTOBUF_CONSTEXPR ReplyFromCoordinator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplyFromCoordinator(const ReplyFromCoordinator& from);
  ReplyFromCoordinator(ReplyFromCoordinator&& from) noexcept
    : ReplyFromCoordinator() {
    *this = ::std::move(from);
  }

  inline ReplyFromCoordinator& operator=(const ReplyFromCoordinator& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplyFromCoordinator& operator=(ReplyFromCoordinator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplyFromCoordinator& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplyFromCoordinator* internal_default_instance() {
    return reinterpret_cast<const ReplyFromCoordinator*>(
               &_ReplyFromCoordinator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReplyFromCoordinator& a, ReplyFromCoordinator& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplyFromCoordinator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplyFromCoordinator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplyFromCoordinator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReplyFromCoordinator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReplyFromCoordinator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReplyFromCoordinator& from) {
    ReplyFromCoordinator::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplyFromCoordinator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator_proto.ReplyFromCoordinator";
  }
  protected:
  explicit ReplyFromCoordinator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:coordinator_proto.ReplyFromCoordinator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class RequestProxyIPPort final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator_proto.RequestProxyIPPort) */ {
 public:
  inline RequestProxyIPPort() : RequestProxyIPPort(nullptr) {}
  ~RequestProxyIPPort() override;
  explicit PROTOBUF_CONSTEXPR RequestProxyIPPort(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestProxyIPPort(const RequestProxyIPPort& from);
  RequestProxyIPPort(RequestProxyIPPort&& from) noexcept
    : RequestProxyIPPort() {
    *this = ::std::move(from);
  }

  inline RequestProxyIPPort& operator=(const RequestProxyIPPort& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestProxyIPPort& operator=(RequestProxyIPPort&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestProxyIPPort& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestProxyIPPort* internal_default_instance() {
    return reinterpret_cast<const RequestProxyIPPort*>(
               &_RequestProxyIPPort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RequestProxyIPPort& a, RequestProxyIPPort& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestProxyIPPort* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestProxyIPPort* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestProxyIPPort* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestProxyIPPort>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestProxyIPPort& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestProxyIPPort& from) {
    RequestProxyIPPort::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestProxyIPPort* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator_proto.RequestProxyIPPort";
  }
  protected:
  explicit RequestProxyIPPort(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValuesizebytesFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // int32 valuesizebytes = 2;
  void clear_valuesizebytes();
  int32_t valuesizebytes() const;
  void set_valuesizebytes(int32_t value);
  private:
  int32_t _internal_valuesizebytes() const;
  void _internal_set_valuesizebytes(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:coordinator_proto.RequestProxyIPPort)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    int32_t valuesizebytes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class ReplyProxyIPPort final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator_proto.ReplyProxyIPPort) */ {
 public:
  inline ReplyProxyIPPort() : ReplyProxyIPPort(nullptr) {}
  ~ReplyProxyIPPort() override;
  explicit PROTOBUF_CONSTEXPR ReplyProxyIPPort(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplyProxyIPPort(const ReplyProxyIPPort& from);
  ReplyProxyIPPort(ReplyProxyIPPort&& from) noexcept
    : ReplyProxyIPPort() {
    *this = ::std::move(from);
  }

  inline ReplyProxyIPPort& operator=(const ReplyProxyIPPort& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplyProxyIPPort& operator=(ReplyProxyIPPort&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplyProxyIPPort& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplyProxyIPPort* internal_default_instance() {
    return reinterpret_cast<const ReplyProxyIPPort*>(
               &_ReplyProxyIPPort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ReplyProxyIPPort& a, ReplyProxyIPPort& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplyProxyIPPort* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplyProxyIPPort* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplyProxyIPPort* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReplyProxyIPPort>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReplyProxyIPPort& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReplyProxyIPPort& from) {
    ReplyProxyIPPort::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplyProxyIPPort* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator_proto.ReplyProxyIPPort";
  }
  protected:
  explicit ReplyProxyIPPort(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProxyipFieldNumber = 1,
    kProxyportFieldNumber = 2,
  };
  // string proxyip = 1;
  void clear_proxyip();
  const std::string& proxyip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proxyip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proxyip();
  PROTOBUF_NODISCARD std::string* release_proxyip();
  void set_allocated_proxyip(std::string* proxyip);
  private:
  const std::string& _internal_proxyip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proxyip(const std::string& value);
  std::string* _internal_mutable_proxyip();
  public:

  // int32 proxyport = 2;
  void clear_proxyport();
  int32_t proxyport() const;
  void set_proxyport(int32_t value);
  private:
  int32_t _internal_proxyport() const;
  void _internal_set_proxyport(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:coordinator_proto.ReplyProxyIPPort)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proxyip_;
    int32_t proxyport_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class CommitAbortKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator_proto.CommitAbortKey) */ {
 public:
  inline CommitAbortKey() : CommitAbortKey(nullptr) {}
  ~CommitAbortKey() override;
  explicit PROTOBUF_CONSTEXPR CommitAbortKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommitAbortKey(const CommitAbortKey& from);
  CommitAbortKey(CommitAbortKey&& from) noexcept
    : CommitAbortKey() {
    *this = ::std::move(from);
  }

  inline CommitAbortKey& operator=(const CommitAbortKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommitAbortKey& operator=(CommitAbortKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommitAbortKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommitAbortKey* internal_default_instance() {
    return reinterpret_cast<const CommitAbortKey*>(
               &_CommitAbortKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CommitAbortKey& a, CommitAbortKey& b) {
    a.Swap(&b);
  }
  inline void Swap(CommitAbortKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommitAbortKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommitAbortKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommitAbortKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommitAbortKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommitAbortKey& from) {
    CommitAbortKey::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommitAbortKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator_proto.CommitAbortKey";
  }
  protected:
  explicit CommitAbortKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kIfcommitmetadataFieldNumber = 2,
    kOppFieldNumber = 3,
    kStripeIdFieldNumber = 4,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bool ifcommitmetadata = 2;
  void clear_ifcommitmetadata();
  bool ifcommitmetadata() const;
  void set_ifcommitmetadata(bool value);
  private:
  bool _internal_ifcommitmetadata() const;
  void _internal_set_ifcommitmetadata(bool value);
  public:

  // int32 opp = 3;
  void clear_opp();
  int32_t opp() const;
  void set_opp(int32_t value);
  private:
  int32_t _internal_opp() const;
  void _internal_set_opp(int32_t value);
  public:

  // int32 stripe_id = 4;
  void clear_stripe_id();
  int32_t stripe_id() const;
  void set_stripe_id(int32_t value);
  private:
  int32_t _internal_stripe_id() const;
  void _internal_set_stripe_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:coordinator_proto.CommitAbortKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    bool ifcommitmetadata_;
    int32_t opp_;
    int32_t stripe_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class AskIfSuccess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator_proto.AskIfSuccess) */ {
 public:
  inline AskIfSuccess() : AskIfSuccess(nullptr) {}
  ~AskIfSuccess() override;
  explicit PROTOBUF_CONSTEXPR AskIfSuccess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AskIfSuccess(const AskIfSuccess& from);
  AskIfSuccess(AskIfSuccess&& from) noexcept
    : AskIfSuccess() {
    *this = ::std::move(from);
  }

  inline AskIfSuccess& operator=(const AskIfSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline AskIfSuccess& operator=(AskIfSuccess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AskIfSuccess& default_instance() {
    return *internal_default_instance();
  }
  static inline const AskIfSuccess* internal_default_instance() {
    return reinterpret_cast<const AskIfSuccess*>(
               &_AskIfSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AskIfSuccess& a, AskIfSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(AskIfSuccess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AskIfSuccess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AskIfSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AskIfSuccess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AskIfSuccess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AskIfSuccess& from) {
    AskIfSuccess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AskIfSuccess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator_proto.AskIfSuccess";
  }
  protected:
  explicit AskIfSuccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kOppFieldNumber = 2,
    kStripeIdFieldNumber = 3,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // int32 opp = 2;
  void clear_opp();
  int32_t opp() const;
  void set_opp(int32_t value);
  private:
  int32_t _internal_opp() const;
  void _internal_set_opp(int32_t value);
  public:

  // int32 stripe_id = 3;
  void clear_stripe_id();
  int32_t stripe_id() const;
  void set_stripe_id(int32_t value);
  private:
  int32_t _internal_stripe_id() const;
  void _internal_set_stripe_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:coordinator_proto.AskIfSuccess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    int32_t opp_;
    int32_t stripe_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class RepIfSuccess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator_proto.RepIfSuccess) */ {
 public:
  inline RepIfSuccess() : RepIfSuccess(nullptr) {}
  ~RepIfSuccess() override;
  explicit PROTOBUF_CONSTEXPR RepIfSuccess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RepIfSuccess(const RepIfSuccess& from);
  RepIfSuccess(RepIfSuccess&& from) noexcept
    : RepIfSuccess() {
    *this = ::std::move(from);
  }

  inline RepIfSuccess& operator=(const RepIfSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepIfSuccess& operator=(RepIfSuccess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RepIfSuccess& default_instance() {
    return *internal_default_instance();
  }
  static inline const RepIfSuccess* internal_default_instance() {
    return reinterpret_cast<const RepIfSuccess*>(
               &_RepIfSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RepIfSuccess& a, RepIfSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(RepIfSuccess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RepIfSuccess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RepIfSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RepIfSuccess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RepIfSuccess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RepIfSuccess& from) {
    RepIfSuccess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepIfSuccess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator_proto.RepIfSuccess";
  }
  protected:
  explicit RepIfSuccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIfcommitFieldNumber = 1,
  };
  // bool ifcommit = 1;
  void clear_ifcommit();
  bool ifcommit() const;
  void set_ifcommit(bool value);
  private:
  bool _internal_ifcommit() const;
  void _internal_set_ifcommit(bool value);
  public:

  // @@protoc_insertion_point(class_scope:coordinator_proto.RepIfSuccess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool ifcommit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class KeyAndClientIP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator_proto.KeyAndClientIP) */ {
 public:
  inline KeyAndClientIP() : KeyAndClientIP(nullptr) {}
  ~KeyAndClientIP() override;
  explicit PROTOBUF_CONSTEXPR KeyAndClientIP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyAndClientIP(const KeyAndClientIP& from);
  KeyAndClientIP(KeyAndClientIP&& from) noexcept
    : KeyAndClientIP() {
    *this = ::std::move(from);
  }

  inline KeyAndClientIP& operator=(const KeyAndClientIP& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyAndClientIP& operator=(KeyAndClientIP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyAndClientIP& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyAndClientIP* internal_default_instance() {
    return reinterpret_cast<const KeyAndClientIP*>(
               &_KeyAndClientIP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(KeyAndClientIP& a, KeyAndClientIP& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyAndClientIP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyAndClientIP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyAndClientIP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeyAndClientIP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeyAndClientIP& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KeyAndClientIP& from) {
    KeyAndClientIP::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyAndClientIP* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator_proto.KeyAndClientIP";
  }
  protected:
  explicit KeyAndClientIP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kClientipFieldNumber = 2,
    kClientportFieldNumber = 3,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string clientip = 2;
  void clear_clientip();
  const std::string& clientip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientip();
  PROTOBUF_NODISCARD std::string* release_clientip();
  void set_allocated_clientip(std::string* clientip);
  private:
  const std::string& _internal_clientip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientip(const std::string& value);
  std::string* _internal_mutable_clientip();
  public:

  // int32 clientport = 3;
  void clear_clientport();
  int32_t clientport() const;
  void set_clientport(int32_t value);
  private:
  int32_t _internal_clientport() const;
  void _internal_set_clientport(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:coordinator_proto.KeyAndClientIP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientip_;
    int32_t clientport_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class RepIfGetSuccess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator_proto.RepIfGetSuccess) */ {
 public:
  inline RepIfGetSuccess() : RepIfGetSuccess(nullptr) {}
  ~RepIfGetSuccess() override;
  explicit PROTOBUF_CONSTEXPR RepIfGetSuccess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RepIfGetSuccess(const RepIfGetSuccess& from);
  RepIfGetSuccess(RepIfGetSuccess&& from) noexcept
    : RepIfGetSuccess() {
    *this = ::std::move(from);
  }

  inline RepIfGetSuccess& operator=(const RepIfGetSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepIfGetSuccess& operator=(RepIfGetSuccess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RepIfGetSuccess& default_instance() {
    return *internal_default_instance();
  }
  static inline const RepIfGetSuccess* internal_default_instance() {
    return reinterpret_cast<const RepIfGetSuccess*>(
               &_RepIfGetSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RepIfGetSuccess& a, RepIfGetSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(RepIfGetSuccess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RepIfGetSuccess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RepIfGetSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RepIfGetSuccess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RepIfGetSuccess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RepIfGetSuccess& from) {
    RepIfGetSuccess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepIfGetSuccess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator_proto.RepIfGetSuccess";
  }
  protected:
  explicit RepIfGetSuccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIfgetsuccessFieldNumber = 1,
    kValuesizebytesFieldNumber = 2,
  };
  // bool ifgetsuccess = 1;
  void clear_ifgetsuccess();
  bool ifgetsuccess() const;
  void set_ifgetsuccess(bool value);
  private:
  bool _internal_ifgetsuccess() const;
  void _internal_set_ifgetsuccess(bool value);
  public:

  // int32 valuesizebytes = 2;
  void clear_valuesizebytes();
  int32_t valuesizebytes() const;
  void set_valuesizebytes(int32_t value);
  private:
  int32_t _internal_valuesizebytes() const;
  void _internal_set_valuesizebytes(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:coordinator_proto.RepIfGetSuccess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool ifgetsuccess_;
    int32_t valuesizebytes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class KeyFromClient final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator_proto.KeyFromClient) */ {
 public:
  inline KeyFromClient() : KeyFromClient(nullptr) {}
  ~KeyFromClient() override;
  explicit PROTOBUF_CONSTEXPR KeyFromClient(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyFromClient(const KeyFromClient& from);
  KeyFromClient(KeyFromClient&& from) noexcept
    : KeyFromClient() {
    *this = ::std::move(from);
  }

  inline KeyFromClient& operator=(const KeyFromClient& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyFromClient& operator=(KeyFromClient&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyFromClient& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyFromClient* internal_default_instance() {
    return reinterpret_cast<const KeyFromClient*>(
               &_KeyFromClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(KeyFromClient& a, KeyFromClient& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyFromClient* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyFromClient* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyFromClient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeyFromClient>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeyFromClient& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KeyFromClient& from) {
    KeyFromClient::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyFromClient* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator_proto.KeyFromClient";
  }
  protected:
  explicit KeyFromClient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:coordinator_proto.KeyFromClient)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class StripeIdFromClient final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator_proto.StripeIdFromClient) */ {
 public:
  inline StripeIdFromClient() : StripeIdFromClient(nullptr) {}
  ~StripeIdFromClient() override;
  explicit PROTOBUF_CONSTEXPR StripeIdFromClient(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StripeIdFromClient(const StripeIdFromClient& from);
  StripeIdFromClient(StripeIdFromClient&& from) noexcept
    : StripeIdFromClient() {
    *this = ::std::move(from);
  }

  inline StripeIdFromClient& operator=(const StripeIdFromClient& from) {
    CopyFrom(from);
    return *this;
  }
  inline StripeIdFromClient& operator=(StripeIdFromClient&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StripeIdFromClient& default_instance() {
    return *internal_default_instance();
  }
  static inline const StripeIdFromClient* internal_default_instance() {
    return reinterpret_cast<const StripeIdFromClient*>(
               &_StripeIdFromClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(StripeIdFromClient& a, StripeIdFromClient& b) {
    a.Swap(&b);
  }
  inline void Swap(StripeIdFromClient* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StripeIdFromClient* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StripeIdFromClient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StripeIdFromClient>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StripeIdFromClient& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StripeIdFromClient& from) {
    StripeIdFromClient::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StripeIdFromClient* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator_proto.StripeIdFromClient";
  }
  protected:
  explicit StripeIdFromClient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStripeIdFieldNumber = 1,
  };
  // int32 stripe_id = 1;
  void clear_stripe_id();
  int32_t stripe_id() const;
  void set_stripe_id(int32_t value);
  private:
  int32_t _internal_stripe_id() const;
  void _internal_set_stripe_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:coordinator_proto.StripeIdFromClient)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t stripe_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class RepIfDeling final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator_proto.RepIfDeling) */ {
 public:
  inline RepIfDeling() : RepIfDeling(nullptr) {}
  ~RepIfDeling() override;
  explicit PROTOBUF_CONSTEXPR RepIfDeling(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RepIfDeling(const RepIfDeling& from);
  RepIfDeling(RepIfDeling&& from) noexcept
    : RepIfDeling() {
    *this = ::std::move(from);
  }

  inline RepIfDeling& operator=(const RepIfDeling& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepIfDeling& operator=(RepIfDeling&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RepIfDeling& default_instance() {
    return *internal_default_instance();
  }
  static inline const RepIfDeling* internal_default_instance() {
    return reinterpret_cast<const RepIfDeling*>(
               &_RepIfDeling_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RepIfDeling& a, RepIfDeling& b) {
    a.Swap(&b);
  }
  inline void Swap(RepIfDeling* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RepIfDeling* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RepIfDeling* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RepIfDeling>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RepIfDeling& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RepIfDeling& from) {
    RepIfDeling::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepIfDeling* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator_proto.RepIfDeling";
  }
  protected:
  explicit RepIfDeling(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIfdelingFieldNumber = 1,
  };
  // bool ifdeling = 1;
  void clear_ifdeling();
  bool ifdeling() const;
  void set_ifdeling(bool value);
  private:
  bool _internal_ifdeling() const;
  void _internal_set_ifdeling(bool value);
  public:

  // @@protoc_insertion_point(class_scope:coordinator_proto.RepIfDeling)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool ifdeling_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class NumberOfStripesToMerge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator_proto.NumberOfStripesToMerge) */ {
 public:
  inline NumberOfStripesToMerge() : NumberOfStripesToMerge(nullptr) {}
  ~NumberOfStripesToMerge() override;
  explicit PROTOBUF_CONSTEXPR NumberOfStripesToMerge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NumberOfStripesToMerge(const NumberOfStripesToMerge& from);
  NumberOfStripesToMerge(NumberOfStripesToMerge&& from) noexcept
    : NumberOfStripesToMerge() {
    *this = ::std::move(from);
  }

  inline NumberOfStripesToMerge& operator=(const NumberOfStripesToMerge& from) {
    CopyFrom(from);
    return *this;
  }
  inline NumberOfStripesToMerge& operator=(NumberOfStripesToMerge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NumberOfStripesToMerge& default_instance() {
    return *internal_default_instance();
  }
  static inline const NumberOfStripesToMerge* internal_default_instance() {
    return reinterpret_cast<const NumberOfStripesToMerge*>(
               &_NumberOfStripesToMerge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(NumberOfStripesToMerge& a, NumberOfStripesToMerge& b) {
    a.Swap(&b);
  }
  inline void Swap(NumberOfStripesToMerge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NumberOfStripesToMerge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NumberOfStripesToMerge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NumberOfStripesToMerge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NumberOfStripesToMerge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NumberOfStripesToMerge& from) {
    NumberOfStripesToMerge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NumberOfStripesToMerge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator_proto.NumberOfStripesToMerge";
  }
  protected:
  explicit NumberOfStripesToMerge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumOfStripesFieldNumber = 1,
  };
  // int32 num_of_stripes = 1;
  void clear_num_of_stripes();
  int32_t num_of_stripes() const;
  void set_num_of_stripes(int32_t value);
  private:
  int32_t _internal_num_of_stripes() const;
  void _internal_set_num_of_stripes(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:coordinator_proto.NumberOfStripesToMerge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t num_of_stripes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class RepIfMerged final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator_proto.RepIfMerged) */ {
 public:
  inline RepIfMerged() : RepIfMerged(nullptr) {}
  ~RepIfMerged() override;
  explicit PROTOBUF_CONSTEXPR RepIfMerged(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RepIfMerged(const RepIfMerged& from);
  RepIfMerged(RepIfMerged&& from) noexcept
    : RepIfMerged() {
    *this = ::std::move(from);
  }

  inline RepIfMerged& operator=(const RepIfMerged& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepIfMerged& operator=(RepIfMerged&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RepIfMerged& default_instance() {
    return *internal_default_instance();
  }
  static inline const RepIfMerged* internal_default_instance() {
    return reinterpret_cast<const RepIfMerged*>(
               &_RepIfMerged_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RepIfMerged& a, RepIfMerged& b) {
    a.Swap(&b);
  }
  inline void Swap(RepIfMerged* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RepIfMerged* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RepIfMerged* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RepIfMerged>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RepIfMerged& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RepIfMerged& from) {
    RepIfMerged::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepIfMerged* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator_proto.RepIfMerged";
  }
  protected:
  explicit RepIfMerged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLcFieldNumber = 2,
    kGcFieldNumber = 3,
    kDcFieldNumber = 4,
    kIfmergedFieldNumber = 1,
  };
  // double lc = 2;
  void clear_lc();
  double lc() const;
  void set_lc(double value);
  private:
  double _internal_lc() const;
  void _internal_set_lc(double value);
  public:

  // double gc = 3;
  void clear_gc();
  double gc() const;
  void set_gc(double value);
  private:
  double _internal_gc() const;
  void _internal_set_gc(double value);
  public:

  // double dc = 4;
  void clear_dc();
  double dc() const;
  void set_dc(double value);
  private:
  double _internal_dc() const;
  void _internal_set_dc(double value);
  public:

  // bool ifmerged = 1;
  void clear_ifmerged();
  bool ifmerged() const;
  void set_ifmerged(bool value);
  private:
  bool _internal_ifmerged() const;
  void _internal_set_ifmerged(bool value);
  public:

  // @@protoc_insertion_point(class_scope:coordinator_proto.RepIfMerged)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double lc_;
    double gc_;
    double dc_;
    bool ifmerged_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// -------------------------------------------------------------------

class RepStripeIds final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:coordinator_proto.RepStripeIds) */ {
 public:
  inline RepStripeIds() : RepStripeIds(nullptr) {}
  ~RepStripeIds() override;
  explicit PROTOBUF_CONSTEXPR RepStripeIds(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RepStripeIds(const RepStripeIds& from);
  RepStripeIds(RepStripeIds&& from) noexcept
    : RepStripeIds() {
    *this = ::std::move(from);
  }

  inline RepStripeIds& operator=(const RepStripeIds& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepStripeIds& operator=(RepStripeIds&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RepStripeIds& default_instance() {
    return *internal_default_instance();
  }
  static inline const RepStripeIds* internal_default_instance() {
    return reinterpret_cast<const RepStripeIds*>(
               &_RepStripeIds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(RepStripeIds& a, RepStripeIds& b) {
    a.Swap(&b);
  }
  inline void Swap(RepStripeIds* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RepStripeIds* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RepStripeIds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RepStripeIds>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RepStripeIds& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RepStripeIds& from) {
    RepStripeIds::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepStripeIds* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "coordinator_proto.RepStripeIds";
  }
  protected:
  explicit RepStripeIds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStripeIdsFieldNumber = 1,
  };
  // repeated int32 stripe_ids = 1;
  int stripe_ids_size() const;
  private:
  int _internal_stripe_ids_size() const;
  public:
  void clear_stripe_ids();
  private:
  int32_t _internal_stripe_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_stripe_ids() const;
  void _internal_add_stripe_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_stripe_ids();
  public:
  int32_t stripe_ids(int index) const;
  void set_stripe_ids(int index, int32_t value);
  void add_stripe_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      stripe_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_stripe_ids();

  // @@protoc_insertion_point(class_scope:coordinator_proto.RepStripeIds)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > stripe_ids_;
    mutable std::atomic<int> _stripe_ids_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_coordinator_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Parameter

// bool partial_decoding = 1;
inline void Parameter::clear_partial_decoding() {
  _impl_.partial_decoding_ = false;
}
inline bool Parameter::_internal_partial_decoding() const {
  return _impl_.partial_decoding_;
}
inline bool Parameter::partial_decoding() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.Parameter.partial_decoding)
  return _internal_partial_decoding();
}
inline void Parameter::_internal_set_partial_decoding(bool value) {
  
  _impl_.partial_decoding_ = value;
}
inline void Parameter::set_partial_decoding(bool value) {
  _internal_set_partial_decoding(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.Parameter.partial_decoding)
}

// int32 encodetype = 2;
inline void Parameter::clear_encodetype() {
  _impl_.encodetype_ = 0;
}
inline int32_t Parameter::_internal_encodetype() const {
  return _impl_.encodetype_;
}
inline int32_t Parameter::encodetype() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.Parameter.encodetype)
  return _internal_encodetype();
}
inline void Parameter::_internal_set_encodetype(int32_t value) {
  
  _impl_.encodetype_ = value;
}
inline void Parameter::set_encodetype(int32_t value) {
  _internal_set_encodetype(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.Parameter.encodetype)
}

// int32 s_stripe_placementtype = 3;
inline void Parameter::clear_s_stripe_placementtype() {
  _impl_.s_stripe_placementtype_ = 0;
}
inline int32_t Parameter::_internal_s_stripe_placementtype() const {
  return _impl_.s_stripe_placementtype_;
}
inline int32_t Parameter::s_stripe_placementtype() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.Parameter.s_stripe_placementtype)
  return _internal_s_stripe_placementtype();
}
inline void Parameter::_internal_set_s_stripe_placementtype(int32_t value) {
  
  _impl_.s_stripe_placementtype_ = value;
}
inline void Parameter::set_s_stripe_placementtype(int32_t value) {
  _internal_set_s_stripe_placementtype(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.Parameter.s_stripe_placementtype)
}

// int32 m_stripe_placementtype = 4;
inline void Parameter::clear_m_stripe_placementtype() {
  _impl_.m_stripe_placementtype_ = 0;
}
inline int32_t Parameter::_internal_m_stripe_placementtype() const {
  return _impl_.m_stripe_placementtype_;
}
inline int32_t Parameter::m_stripe_placementtype() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.Parameter.m_stripe_placementtype)
  return _internal_m_stripe_placementtype();
}
inline void Parameter::_internal_set_m_stripe_placementtype(int32_t value) {
  
  _impl_.m_stripe_placementtype_ = value;
}
inline void Parameter::set_m_stripe_placementtype(int32_t value) {
  _internal_set_m_stripe_placementtype(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.Parameter.m_stripe_placementtype)
}

// int32 k_datablock = 5;
inline void Parameter::clear_k_datablock() {
  _impl_.k_datablock_ = 0;
}
inline int32_t Parameter::_internal_k_datablock() const {
  return _impl_.k_datablock_;
}
inline int32_t Parameter::k_datablock() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.Parameter.k_datablock)
  return _internal_k_datablock();
}
inline void Parameter::_internal_set_k_datablock(int32_t value) {
  
  _impl_.k_datablock_ = value;
}
inline void Parameter::set_k_datablock(int32_t value) {
  _internal_set_k_datablock(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.Parameter.k_datablock)
}

// int32 l_localparityblock = 6;
inline void Parameter::clear_l_localparityblock() {
  _impl_.l_localparityblock_ = 0;
}
inline int32_t Parameter::_internal_l_localparityblock() const {
  return _impl_.l_localparityblock_;
}
inline int32_t Parameter::l_localparityblock() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.Parameter.l_localparityblock)
  return _internal_l_localparityblock();
}
inline void Parameter::_internal_set_l_localparityblock(int32_t value) {
  
  _impl_.l_localparityblock_ = value;
}
inline void Parameter::set_l_localparityblock(int32_t value) {
  _internal_set_l_localparityblock(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.Parameter.l_localparityblock)
}

// int32 g_m_globalparityblock = 7;
inline void Parameter::clear_g_m_globalparityblock() {
  _impl_.g_m_globalparityblock_ = 0;
}
inline int32_t Parameter::_internal_g_m_globalparityblock() const {
  return _impl_.g_m_globalparityblock_;
}
inline int32_t Parameter::g_m_globalparityblock() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.Parameter.g_m_globalparityblock)
  return _internal_g_m_globalparityblock();
}
inline void Parameter::_internal_set_g_m_globalparityblock(int32_t value) {
  
  _impl_.g_m_globalparityblock_ = value;
}
inline void Parameter::set_g_m_globalparityblock(int32_t value) {
  _internal_set_g_m_globalparityblock(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.Parameter.g_m_globalparityblock)
}

// int32 b_datapergroup = 8;
inline void Parameter::clear_b_datapergroup() {
  _impl_.b_datapergroup_ = 0;
}
inline int32_t Parameter::_internal_b_datapergroup() const {
  return _impl_.b_datapergroup_;
}
inline int32_t Parameter::b_datapergroup() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.Parameter.b_datapergroup)
  return _internal_b_datapergroup();
}
inline void Parameter::_internal_set_b_datapergroup(int32_t value) {
  
  _impl_.b_datapergroup_ = value;
}
inline void Parameter::set_b_datapergroup(int32_t value) {
  _internal_set_b_datapergroup(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.Parameter.b_datapergroup)
}

// int32 x_stripepermergegroup = 9;
inline void Parameter::clear_x_stripepermergegroup() {
  _impl_.x_stripepermergegroup_ = 0;
}
inline int32_t Parameter::_internal_x_stripepermergegroup() const {
  return _impl_.x_stripepermergegroup_;
}
inline int32_t Parameter::x_stripepermergegroup() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.Parameter.x_stripepermergegroup)
  return _internal_x_stripepermergegroup();
}
inline void Parameter::_internal_set_x_stripepermergegroup(int32_t value) {
  
  _impl_.x_stripepermergegroup_ = value;
}
inline void Parameter::set_x_stripepermergegroup(int32_t value) {
  _internal_set_x_stripepermergegroup(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.Parameter.x_stripepermergegroup)
}

// -------------------------------------------------------------------

// RepIfSetParaSuccess

// bool ifsetparameter = 1;
inline void RepIfSetParaSuccess::clear_ifsetparameter() {
  _impl_.ifsetparameter_ = false;
}
inline bool RepIfSetParaSuccess::_internal_ifsetparameter() const {
  return _impl_.ifsetparameter_;
}
inline bool RepIfSetParaSuccess::ifsetparameter() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.RepIfSetParaSuccess.ifsetparameter)
  return _internal_ifsetparameter();
}
inline void RepIfSetParaSuccess::_internal_set_ifsetparameter(bool value) {
  
  _impl_.ifsetparameter_ = value;
}
inline void RepIfSetParaSuccess::set_ifsetparameter(bool value) {
  _internal_set_ifsetparameter(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.RepIfSetParaSuccess.ifsetparameter)
}

// -------------------------------------------------------------------

// RequestToCoordinator

// string name = 1;
inline void RequestToCoordinator::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& RequestToCoordinator::name() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.RequestToCoordinator.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestToCoordinator::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:coordinator_proto.RequestToCoordinator.name)
}
inline std::string* RequestToCoordinator::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:coordinator_proto.RequestToCoordinator.name)
  return _s;
}
inline const std::string& RequestToCoordinator::_internal_name() const {
  return _impl_.name_.Get();
}
inline void RequestToCoordinator::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestToCoordinator::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* RequestToCoordinator::release_name() {
  // @@protoc_insertion_point(field_release:coordinator_proto.RequestToCoordinator.name)
  return _impl_.name_.Release();
}
inline void RequestToCoordinator::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:coordinator_proto.RequestToCoordinator.name)
}

// -------------------------------------------------------------------

// ReplyFromCoordinator

// string message = 1;
inline void ReplyFromCoordinator::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ReplyFromCoordinator::message() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.ReplyFromCoordinator.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReplyFromCoordinator::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:coordinator_proto.ReplyFromCoordinator.message)
}
inline std::string* ReplyFromCoordinator::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:coordinator_proto.ReplyFromCoordinator.message)
  return _s;
}
inline const std::string& ReplyFromCoordinator::_internal_message() const {
  return _impl_.message_.Get();
}
inline void ReplyFromCoordinator::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* ReplyFromCoordinator::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* ReplyFromCoordinator::release_message() {
  // @@protoc_insertion_point(field_release:coordinator_proto.ReplyFromCoordinator.message)
  return _impl_.message_.Release();
}
inline void ReplyFromCoordinator::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:coordinator_proto.ReplyFromCoordinator.message)
}

// -------------------------------------------------------------------

// RequestProxyIPPort

// string key = 1;
inline void RequestProxyIPPort::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& RequestProxyIPPort::key() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.RequestProxyIPPort.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestProxyIPPort::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:coordinator_proto.RequestProxyIPPort.key)
}
inline std::string* RequestProxyIPPort::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:coordinator_proto.RequestProxyIPPort.key)
  return _s;
}
inline const std::string& RequestProxyIPPort::_internal_key() const {
  return _impl_.key_.Get();
}
inline void RequestProxyIPPort::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestProxyIPPort::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* RequestProxyIPPort::release_key() {
  // @@protoc_insertion_point(field_release:coordinator_proto.RequestProxyIPPort.key)
  return _impl_.key_.Release();
}
inline void RequestProxyIPPort::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:coordinator_proto.RequestProxyIPPort.key)
}

// int32 valuesizebytes = 2;
inline void RequestProxyIPPort::clear_valuesizebytes() {
  _impl_.valuesizebytes_ = 0;
}
inline int32_t RequestProxyIPPort::_internal_valuesizebytes() const {
  return _impl_.valuesizebytes_;
}
inline int32_t RequestProxyIPPort::valuesizebytes() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.RequestProxyIPPort.valuesizebytes)
  return _internal_valuesizebytes();
}
inline void RequestProxyIPPort::_internal_set_valuesizebytes(int32_t value) {
  
  _impl_.valuesizebytes_ = value;
}
inline void RequestProxyIPPort::set_valuesizebytes(int32_t value) {
  _internal_set_valuesizebytes(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.RequestProxyIPPort.valuesizebytes)
}

// -------------------------------------------------------------------

// ReplyProxyIPPort

// string proxyip = 1;
inline void ReplyProxyIPPort::clear_proxyip() {
  _impl_.proxyip_.ClearToEmpty();
}
inline const std::string& ReplyProxyIPPort::proxyip() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.ReplyProxyIPPort.proxyip)
  return _internal_proxyip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReplyProxyIPPort::set_proxyip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.proxyip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:coordinator_proto.ReplyProxyIPPort.proxyip)
}
inline std::string* ReplyProxyIPPort::mutable_proxyip() {
  std::string* _s = _internal_mutable_proxyip();
  // @@protoc_insertion_point(field_mutable:coordinator_proto.ReplyProxyIPPort.proxyip)
  return _s;
}
inline const std::string& ReplyProxyIPPort::_internal_proxyip() const {
  return _impl_.proxyip_.Get();
}
inline void ReplyProxyIPPort::_internal_set_proxyip(const std::string& value) {
  
  _impl_.proxyip_.Set(value, GetArenaForAllocation());
}
inline std::string* ReplyProxyIPPort::_internal_mutable_proxyip() {
  
  return _impl_.proxyip_.Mutable(GetArenaForAllocation());
}
inline std::string* ReplyProxyIPPort::release_proxyip() {
  // @@protoc_insertion_point(field_release:coordinator_proto.ReplyProxyIPPort.proxyip)
  return _impl_.proxyip_.Release();
}
inline void ReplyProxyIPPort::set_allocated_proxyip(std::string* proxyip) {
  if (proxyip != nullptr) {
    
  } else {
    
  }
  _impl_.proxyip_.SetAllocated(proxyip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.proxyip_.IsDefault()) {
    _impl_.proxyip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:coordinator_proto.ReplyProxyIPPort.proxyip)
}

// int32 proxyport = 2;
inline void ReplyProxyIPPort::clear_proxyport() {
  _impl_.proxyport_ = 0;
}
inline int32_t ReplyProxyIPPort::_internal_proxyport() const {
  return _impl_.proxyport_;
}
inline int32_t ReplyProxyIPPort::proxyport() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.ReplyProxyIPPort.proxyport)
  return _internal_proxyport();
}
inline void ReplyProxyIPPort::_internal_set_proxyport(int32_t value) {
  
  _impl_.proxyport_ = value;
}
inline void ReplyProxyIPPort::set_proxyport(int32_t value) {
  _internal_set_proxyport(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.ReplyProxyIPPort.proxyport)
}

// -------------------------------------------------------------------

// CommitAbortKey

// string key = 1;
inline void CommitAbortKey::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& CommitAbortKey::key() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.CommitAbortKey.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommitAbortKey::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:coordinator_proto.CommitAbortKey.key)
}
inline std::string* CommitAbortKey::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:coordinator_proto.CommitAbortKey.key)
  return _s;
}
inline const std::string& CommitAbortKey::_internal_key() const {
  return _impl_.key_.Get();
}
inline void CommitAbortKey::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* CommitAbortKey::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* CommitAbortKey::release_key() {
  // @@protoc_insertion_point(field_release:coordinator_proto.CommitAbortKey.key)
  return _impl_.key_.Release();
}
inline void CommitAbortKey::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:coordinator_proto.CommitAbortKey.key)
}

// bool ifcommitmetadata = 2;
inline void CommitAbortKey::clear_ifcommitmetadata() {
  _impl_.ifcommitmetadata_ = false;
}
inline bool CommitAbortKey::_internal_ifcommitmetadata() const {
  return _impl_.ifcommitmetadata_;
}
inline bool CommitAbortKey::ifcommitmetadata() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.CommitAbortKey.ifcommitmetadata)
  return _internal_ifcommitmetadata();
}
inline void CommitAbortKey::_internal_set_ifcommitmetadata(bool value) {
  
  _impl_.ifcommitmetadata_ = value;
}
inline void CommitAbortKey::set_ifcommitmetadata(bool value) {
  _internal_set_ifcommitmetadata(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.CommitAbortKey.ifcommitmetadata)
}

// int32 opp = 3;
inline void CommitAbortKey::clear_opp() {
  _impl_.opp_ = 0;
}
inline int32_t CommitAbortKey::_internal_opp() const {
  return _impl_.opp_;
}
inline int32_t CommitAbortKey::opp() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.CommitAbortKey.opp)
  return _internal_opp();
}
inline void CommitAbortKey::_internal_set_opp(int32_t value) {
  
  _impl_.opp_ = value;
}
inline void CommitAbortKey::set_opp(int32_t value) {
  _internal_set_opp(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.CommitAbortKey.opp)
}

// int32 stripe_id = 4;
inline void CommitAbortKey::clear_stripe_id() {
  _impl_.stripe_id_ = 0;
}
inline int32_t CommitAbortKey::_internal_stripe_id() const {
  return _impl_.stripe_id_;
}
inline int32_t CommitAbortKey::stripe_id() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.CommitAbortKey.stripe_id)
  return _internal_stripe_id();
}
inline void CommitAbortKey::_internal_set_stripe_id(int32_t value) {
  
  _impl_.stripe_id_ = value;
}
inline void CommitAbortKey::set_stripe_id(int32_t value) {
  _internal_set_stripe_id(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.CommitAbortKey.stripe_id)
}

// -------------------------------------------------------------------

// AskIfSuccess

// string key = 1;
inline void AskIfSuccess::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& AskIfSuccess::key() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.AskIfSuccess.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AskIfSuccess::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:coordinator_proto.AskIfSuccess.key)
}
inline std::string* AskIfSuccess::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:coordinator_proto.AskIfSuccess.key)
  return _s;
}
inline const std::string& AskIfSuccess::_internal_key() const {
  return _impl_.key_.Get();
}
inline void AskIfSuccess::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* AskIfSuccess::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* AskIfSuccess::release_key() {
  // @@protoc_insertion_point(field_release:coordinator_proto.AskIfSuccess.key)
  return _impl_.key_.Release();
}
inline void AskIfSuccess::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:coordinator_proto.AskIfSuccess.key)
}

// int32 opp = 2;
inline void AskIfSuccess::clear_opp() {
  _impl_.opp_ = 0;
}
inline int32_t AskIfSuccess::_internal_opp() const {
  return _impl_.opp_;
}
inline int32_t AskIfSuccess::opp() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.AskIfSuccess.opp)
  return _internal_opp();
}
inline void AskIfSuccess::_internal_set_opp(int32_t value) {
  
  _impl_.opp_ = value;
}
inline void AskIfSuccess::set_opp(int32_t value) {
  _internal_set_opp(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.AskIfSuccess.opp)
}

// int32 stripe_id = 3;
inline void AskIfSuccess::clear_stripe_id() {
  _impl_.stripe_id_ = 0;
}
inline int32_t AskIfSuccess::_internal_stripe_id() const {
  return _impl_.stripe_id_;
}
inline int32_t AskIfSuccess::stripe_id() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.AskIfSuccess.stripe_id)
  return _internal_stripe_id();
}
inline void AskIfSuccess::_internal_set_stripe_id(int32_t value) {
  
  _impl_.stripe_id_ = value;
}
inline void AskIfSuccess::set_stripe_id(int32_t value) {
  _internal_set_stripe_id(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.AskIfSuccess.stripe_id)
}

// -------------------------------------------------------------------

// RepIfSuccess

// bool ifcommit = 1;
inline void RepIfSuccess::clear_ifcommit() {
  _impl_.ifcommit_ = false;
}
inline bool RepIfSuccess::_internal_ifcommit() const {
  return _impl_.ifcommit_;
}
inline bool RepIfSuccess::ifcommit() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.RepIfSuccess.ifcommit)
  return _internal_ifcommit();
}
inline void RepIfSuccess::_internal_set_ifcommit(bool value) {
  
  _impl_.ifcommit_ = value;
}
inline void RepIfSuccess::set_ifcommit(bool value) {
  _internal_set_ifcommit(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.RepIfSuccess.ifcommit)
}

// -------------------------------------------------------------------

// KeyAndClientIP

// string key = 1;
inline void KeyAndClientIP::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& KeyAndClientIP::key() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.KeyAndClientIP.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyAndClientIP::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:coordinator_proto.KeyAndClientIP.key)
}
inline std::string* KeyAndClientIP::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:coordinator_proto.KeyAndClientIP.key)
  return _s;
}
inline const std::string& KeyAndClientIP::_internal_key() const {
  return _impl_.key_.Get();
}
inline void KeyAndClientIP::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyAndClientIP::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyAndClientIP::release_key() {
  // @@protoc_insertion_point(field_release:coordinator_proto.KeyAndClientIP.key)
  return _impl_.key_.Release();
}
inline void KeyAndClientIP::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:coordinator_proto.KeyAndClientIP.key)
}

// string clientip = 2;
inline void KeyAndClientIP::clear_clientip() {
  _impl_.clientip_.ClearToEmpty();
}
inline const std::string& KeyAndClientIP::clientip() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.KeyAndClientIP.clientip)
  return _internal_clientip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyAndClientIP::set_clientip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.clientip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:coordinator_proto.KeyAndClientIP.clientip)
}
inline std::string* KeyAndClientIP::mutable_clientip() {
  std::string* _s = _internal_mutable_clientip();
  // @@protoc_insertion_point(field_mutable:coordinator_proto.KeyAndClientIP.clientip)
  return _s;
}
inline const std::string& KeyAndClientIP::_internal_clientip() const {
  return _impl_.clientip_.Get();
}
inline void KeyAndClientIP::_internal_set_clientip(const std::string& value) {
  
  _impl_.clientip_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyAndClientIP::_internal_mutable_clientip() {
  
  return _impl_.clientip_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyAndClientIP::release_clientip() {
  // @@protoc_insertion_point(field_release:coordinator_proto.KeyAndClientIP.clientip)
  return _impl_.clientip_.Release();
}
inline void KeyAndClientIP::set_allocated_clientip(std::string* clientip) {
  if (clientip != nullptr) {
    
  } else {
    
  }
  _impl_.clientip_.SetAllocated(clientip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.clientip_.IsDefault()) {
    _impl_.clientip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:coordinator_proto.KeyAndClientIP.clientip)
}

// int32 clientport = 3;
inline void KeyAndClientIP::clear_clientport() {
  _impl_.clientport_ = 0;
}
inline int32_t KeyAndClientIP::_internal_clientport() const {
  return _impl_.clientport_;
}
inline int32_t KeyAndClientIP::clientport() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.KeyAndClientIP.clientport)
  return _internal_clientport();
}
inline void KeyAndClientIP::_internal_set_clientport(int32_t value) {
  
  _impl_.clientport_ = value;
}
inline void KeyAndClientIP::set_clientport(int32_t value) {
  _internal_set_clientport(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.KeyAndClientIP.clientport)
}

// -------------------------------------------------------------------

// RepIfGetSuccess

// bool ifgetsuccess = 1;
inline void RepIfGetSuccess::clear_ifgetsuccess() {
  _impl_.ifgetsuccess_ = false;
}
inline bool RepIfGetSuccess::_internal_ifgetsuccess() const {
  return _impl_.ifgetsuccess_;
}
inline bool RepIfGetSuccess::ifgetsuccess() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.RepIfGetSuccess.ifgetsuccess)
  return _internal_ifgetsuccess();
}
inline void RepIfGetSuccess::_internal_set_ifgetsuccess(bool value) {
  
  _impl_.ifgetsuccess_ = value;
}
inline void RepIfGetSuccess::set_ifgetsuccess(bool value) {
  _internal_set_ifgetsuccess(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.RepIfGetSuccess.ifgetsuccess)
}

// int32 valuesizebytes = 2;
inline void RepIfGetSuccess::clear_valuesizebytes() {
  _impl_.valuesizebytes_ = 0;
}
inline int32_t RepIfGetSuccess::_internal_valuesizebytes() const {
  return _impl_.valuesizebytes_;
}
inline int32_t RepIfGetSuccess::valuesizebytes() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.RepIfGetSuccess.valuesizebytes)
  return _internal_valuesizebytes();
}
inline void RepIfGetSuccess::_internal_set_valuesizebytes(int32_t value) {
  
  _impl_.valuesizebytes_ = value;
}
inline void RepIfGetSuccess::set_valuesizebytes(int32_t value) {
  _internal_set_valuesizebytes(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.RepIfGetSuccess.valuesizebytes)
}

// -------------------------------------------------------------------

// KeyFromClient

// string key = 1;
inline void KeyFromClient::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& KeyFromClient::key() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.KeyFromClient.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyFromClient::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:coordinator_proto.KeyFromClient.key)
}
inline std::string* KeyFromClient::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:coordinator_proto.KeyFromClient.key)
  return _s;
}
inline const std::string& KeyFromClient::_internal_key() const {
  return _impl_.key_.Get();
}
inline void KeyFromClient::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyFromClient::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyFromClient::release_key() {
  // @@protoc_insertion_point(field_release:coordinator_proto.KeyFromClient.key)
  return _impl_.key_.Release();
}
inline void KeyFromClient::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:coordinator_proto.KeyFromClient.key)
}

// -------------------------------------------------------------------

// StripeIdFromClient

// int32 stripe_id = 1;
inline void StripeIdFromClient::clear_stripe_id() {
  _impl_.stripe_id_ = 0;
}
inline int32_t StripeIdFromClient::_internal_stripe_id() const {
  return _impl_.stripe_id_;
}
inline int32_t StripeIdFromClient::stripe_id() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.StripeIdFromClient.stripe_id)
  return _internal_stripe_id();
}
inline void StripeIdFromClient::_internal_set_stripe_id(int32_t value) {
  
  _impl_.stripe_id_ = value;
}
inline void StripeIdFromClient::set_stripe_id(int32_t value) {
  _internal_set_stripe_id(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.StripeIdFromClient.stripe_id)
}

// -------------------------------------------------------------------

// RepIfDeling

// bool ifdeling = 1;
inline void RepIfDeling::clear_ifdeling() {
  _impl_.ifdeling_ = false;
}
inline bool RepIfDeling::_internal_ifdeling() const {
  return _impl_.ifdeling_;
}
inline bool RepIfDeling::ifdeling() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.RepIfDeling.ifdeling)
  return _internal_ifdeling();
}
inline void RepIfDeling::_internal_set_ifdeling(bool value) {
  
  _impl_.ifdeling_ = value;
}
inline void RepIfDeling::set_ifdeling(bool value) {
  _internal_set_ifdeling(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.RepIfDeling.ifdeling)
}

// -------------------------------------------------------------------

// NumberOfStripesToMerge

// int32 num_of_stripes = 1;
inline void NumberOfStripesToMerge::clear_num_of_stripes() {
  _impl_.num_of_stripes_ = 0;
}
inline int32_t NumberOfStripesToMerge::_internal_num_of_stripes() const {
  return _impl_.num_of_stripes_;
}
inline int32_t NumberOfStripesToMerge::num_of_stripes() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.NumberOfStripesToMerge.num_of_stripes)
  return _internal_num_of_stripes();
}
inline void NumberOfStripesToMerge::_internal_set_num_of_stripes(int32_t value) {
  
  _impl_.num_of_stripes_ = value;
}
inline void NumberOfStripesToMerge::set_num_of_stripes(int32_t value) {
  _internal_set_num_of_stripes(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.NumberOfStripesToMerge.num_of_stripes)
}

// -------------------------------------------------------------------

// RepIfMerged

// bool ifmerged = 1;
inline void RepIfMerged::clear_ifmerged() {
  _impl_.ifmerged_ = false;
}
inline bool RepIfMerged::_internal_ifmerged() const {
  return _impl_.ifmerged_;
}
inline bool RepIfMerged::ifmerged() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.RepIfMerged.ifmerged)
  return _internal_ifmerged();
}
inline void RepIfMerged::_internal_set_ifmerged(bool value) {
  
  _impl_.ifmerged_ = value;
}
inline void RepIfMerged::set_ifmerged(bool value) {
  _internal_set_ifmerged(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.RepIfMerged.ifmerged)
}

// double lc = 2;
inline void RepIfMerged::clear_lc() {
  _impl_.lc_ = 0;
}
inline double RepIfMerged::_internal_lc() const {
  return _impl_.lc_;
}
inline double RepIfMerged::lc() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.RepIfMerged.lc)
  return _internal_lc();
}
inline void RepIfMerged::_internal_set_lc(double value) {
  
  _impl_.lc_ = value;
}
inline void RepIfMerged::set_lc(double value) {
  _internal_set_lc(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.RepIfMerged.lc)
}

// double gc = 3;
inline void RepIfMerged::clear_gc() {
  _impl_.gc_ = 0;
}
inline double RepIfMerged::_internal_gc() const {
  return _impl_.gc_;
}
inline double RepIfMerged::gc() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.RepIfMerged.gc)
  return _internal_gc();
}
inline void RepIfMerged::_internal_set_gc(double value) {
  
  _impl_.gc_ = value;
}
inline void RepIfMerged::set_gc(double value) {
  _internal_set_gc(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.RepIfMerged.gc)
}

// double dc = 4;
inline void RepIfMerged::clear_dc() {
  _impl_.dc_ = 0;
}
inline double RepIfMerged::_internal_dc() const {
  return _impl_.dc_;
}
inline double RepIfMerged::dc() const {
  // @@protoc_insertion_point(field_get:coordinator_proto.RepIfMerged.dc)
  return _internal_dc();
}
inline void RepIfMerged::_internal_set_dc(double value) {
  
  _impl_.dc_ = value;
}
inline void RepIfMerged::set_dc(double value) {
  _internal_set_dc(value);
  // @@protoc_insertion_point(field_set:coordinator_proto.RepIfMerged.dc)
}

// -------------------------------------------------------------------

// RepStripeIds

// repeated int32 stripe_ids = 1;
inline int RepStripeIds::_internal_stripe_ids_size() const {
  return _impl_.stripe_ids_.size();
}
inline int RepStripeIds::stripe_ids_size() const {
  return _internal_stripe_ids_size();
}
inline void RepStripeIds::clear_stripe_ids() {
  _impl_.stripe_ids_.Clear();
}
inline int32_t RepStripeIds::_internal_stripe_ids(int index) const {
  return _impl_.stripe_ids_.Get(index);
}
inline int32_t RepStripeIds::stripe_ids(int index) const {
  // @@protoc_insertion_point(field_get:coordinator_proto.RepStripeIds.stripe_ids)
  return _internal_stripe_ids(index);
}
inline void RepStripeIds::set_stripe_ids(int index, int32_t value) {
  _impl_.stripe_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:coordinator_proto.RepStripeIds.stripe_ids)
}
inline void RepStripeIds::_internal_add_stripe_ids(int32_t value) {
  _impl_.stripe_ids_.Add(value);
}
inline void RepStripeIds::add_stripe_ids(int32_t value) {
  _internal_add_stripe_ids(value);
  // @@protoc_insertion_point(field_add:coordinator_proto.RepStripeIds.stripe_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RepStripeIds::_internal_stripe_ids() const {
  return _impl_.stripe_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
RepStripeIds::stripe_ids() const {
  // @@protoc_insertion_point(field_list:coordinator_proto.RepStripeIds.stripe_ids)
  return _internal_stripe_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RepStripeIds::_internal_mutable_stripe_ids() {
  return &_impl_.stripe_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
RepStripeIds::mutable_stripe_ids() {
  // @@protoc_insertion_point(field_mutable_list:coordinator_proto.RepStripeIds.stripe_ids)
  return _internal_mutable_stripe_ids();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace coordinator_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_coordinator_2eproto
