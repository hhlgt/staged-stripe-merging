// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: coordinator.proto

#include "coordinator.pb.h"
#include "coordinator.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace coordinator_proto {

static const char* coordinatorService_method_names[] = {
  "/coordinator_proto.coordinatorService/sayHelloToCoordinator",
  "/coordinator_proto.coordinatorService/checkalive",
  "/coordinator_proto.coordinatorService/setParameter",
  "/coordinator_proto.coordinatorService/uploadOriginKeyValue",
  "/coordinator_proto.coordinatorService/reportCommitAbort",
  "/coordinator_proto.coordinatorService/checkCommitAbort",
  "/coordinator_proto.coordinatorService/getValue",
  "/coordinator_proto.coordinatorService/delByKey",
  "/coordinator_proto.coordinatorService/delByStripe",
  "/coordinator_proto.coordinatorService/requestMerge",
  "/coordinator_proto.coordinatorService/listStripes",
};

std::unique_ptr< coordinatorService::Stub> coordinatorService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< coordinatorService::Stub> stub(new coordinatorService::Stub(channel, options));
  return stub;
}

coordinatorService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_sayHelloToCoordinator_(coordinatorService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_checkalive_(coordinatorService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_setParameter_(coordinatorService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_uploadOriginKeyValue_(coordinatorService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_reportCommitAbort_(coordinatorService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_checkCommitAbort_(coordinatorService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getValue_(coordinatorService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_delByKey_(coordinatorService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_delByStripe_(coordinatorService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_requestMerge_(coordinatorService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_listStripes_(coordinatorService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status coordinatorService::Stub::sayHelloToCoordinator(::grpc::ClientContext* context, const ::coordinator_proto::RequestToCoordinator& request, ::coordinator_proto::ReplyFromCoordinator* response) {
  return ::grpc::internal::BlockingUnaryCall< ::coordinator_proto::RequestToCoordinator, ::coordinator_proto::ReplyFromCoordinator, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_sayHelloToCoordinator_, context, request, response);
}

void coordinatorService::Stub::async::sayHelloToCoordinator(::grpc::ClientContext* context, const ::coordinator_proto::RequestToCoordinator* request, ::coordinator_proto::ReplyFromCoordinator* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::coordinator_proto::RequestToCoordinator, ::coordinator_proto::ReplyFromCoordinator, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sayHelloToCoordinator_, context, request, response, std::move(f));
}

void coordinatorService::Stub::async::sayHelloToCoordinator(::grpc::ClientContext* context, const ::coordinator_proto::RequestToCoordinator* request, ::coordinator_proto::ReplyFromCoordinator* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sayHelloToCoordinator_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::coordinator_proto::ReplyFromCoordinator>* coordinatorService::Stub::PrepareAsyncsayHelloToCoordinatorRaw(::grpc::ClientContext* context, const ::coordinator_proto::RequestToCoordinator& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::coordinator_proto::ReplyFromCoordinator, ::coordinator_proto::RequestToCoordinator, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_sayHelloToCoordinator_, context, request);
}

::grpc::ClientAsyncResponseReader< ::coordinator_proto::ReplyFromCoordinator>* coordinatorService::Stub::AsyncsayHelloToCoordinatorRaw(::grpc::ClientContext* context, const ::coordinator_proto::RequestToCoordinator& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsayHelloToCoordinatorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status coordinatorService::Stub::checkalive(::grpc::ClientContext* context, const ::coordinator_proto::RequestToCoordinator& request, ::coordinator_proto::ReplyFromCoordinator* response) {
  return ::grpc::internal::BlockingUnaryCall< ::coordinator_proto::RequestToCoordinator, ::coordinator_proto::ReplyFromCoordinator, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_checkalive_, context, request, response);
}

void coordinatorService::Stub::async::checkalive(::grpc::ClientContext* context, const ::coordinator_proto::RequestToCoordinator* request, ::coordinator_proto::ReplyFromCoordinator* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::coordinator_proto::RequestToCoordinator, ::coordinator_proto::ReplyFromCoordinator, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_checkalive_, context, request, response, std::move(f));
}

void coordinatorService::Stub::async::checkalive(::grpc::ClientContext* context, const ::coordinator_proto::RequestToCoordinator* request, ::coordinator_proto::ReplyFromCoordinator* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_checkalive_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::coordinator_proto::ReplyFromCoordinator>* coordinatorService::Stub::PrepareAsynccheckaliveRaw(::grpc::ClientContext* context, const ::coordinator_proto::RequestToCoordinator& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::coordinator_proto::ReplyFromCoordinator, ::coordinator_proto::RequestToCoordinator, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_checkalive_, context, request);
}

::grpc::ClientAsyncResponseReader< ::coordinator_proto::ReplyFromCoordinator>* coordinatorService::Stub::AsynccheckaliveRaw(::grpc::ClientContext* context, const ::coordinator_proto::RequestToCoordinator& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccheckaliveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status coordinatorService::Stub::setParameter(::grpc::ClientContext* context, const ::coordinator_proto::Parameter& request, ::coordinator_proto::RepIfSetParaSuccess* response) {
  return ::grpc::internal::BlockingUnaryCall< ::coordinator_proto::Parameter, ::coordinator_proto::RepIfSetParaSuccess, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setParameter_, context, request, response);
}

void coordinatorService::Stub::async::setParameter(::grpc::ClientContext* context, const ::coordinator_proto::Parameter* request, ::coordinator_proto::RepIfSetParaSuccess* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::coordinator_proto::Parameter, ::coordinator_proto::RepIfSetParaSuccess, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setParameter_, context, request, response, std::move(f));
}

void coordinatorService::Stub::async::setParameter(::grpc::ClientContext* context, const ::coordinator_proto::Parameter* request, ::coordinator_proto::RepIfSetParaSuccess* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setParameter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::coordinator_proto::RepIfSetParaSuccess>* coordinatorService::Stub::PrepareAsyncsetParameterRaw(::grpc::ClientContext* context, const ::coordinator_proto::Parameter& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::coordinator_proto::RepIfSetParaSuccess, ::coordinator_proto::Parameter, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setParameter_, context, request);
}

::grpc::ClientAsyncResponseReader< ::coordinator_proto::RepIfSetParaSuccess>* coordinatorService::Stub::AsyncsetParameterRaw(::grpc::ClientContext* context, const ::coordinator_proto::Parameter& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetParameterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status coordinatorService::Stub::uploadOriginKeyValue(::grpc::ClientContext* context, const ::coordinator_proto::RequestProxyIPPort& request, ::coordinator_proto::ReplyProxyIPPort* response) {
  return ::grpc::internal::BlockingUnaryCall< ::coordinator_proto::RequestProxyIPPort, ::coordinator_proto::ReplyProxyIPPort, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_uploadOriginKeyValue_, context, request, response);
}

void coordinatorService::Stub::async::uploadOriginKeyValue(::grpc::ClientContext* context, const ::coordinator_proto::RequestProxyIPPort* request, ::coordinator_proto::ReplyProxyIPPort* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::coordinator_proto::RequestProxyIPPort, ::coordinator_proto::ReplyProxyIPPort, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_uploadOriginKeyValue_, context, request, response, std::move(f));
}

void coordinatorService::Stub::async::uploadOriginKeyValue(::grpc::ClientContext* context, const ::coordinator_proto::RequestProxyIPPort* request, ::coordinator_proto::ReplyProxyIPPort* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_uploadOriginKeyValue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::coordinator_proto::ReplyProxyIPPort>* coordinatorService::Stub::PrepareAsyncuploadOriginKeyValueRaw(::grpc::ClientContext* context, const ::coordinator_proto::RequestProxyIPPort& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::coordinator_proto::ReplyProxyIPPort, ::coordinator_proto::RequestProxyIPPort, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_uploadOriginKeyValue_, context, request);
}

::grpc::ClientAsyncResponseReader< ::coordinator_proto::ReplyProxyIPPort>* coordinatorService::Stub::AsyncuploadOriginKeyValueRaw(::grpc::ClientContext* context, const ::coordinator_proto::RequestProxyIPPort& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncuploadOriginKeyValueRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status coordinatorService::Stub::reportCommitAbort(::grpc::ClientContext* context, const ::coordinator_proto::CommitAbortKey& request, ::coordinator_proto::ReplyFromCoordinator* response) {
  return ::grpc::internal::BlockingUnaryCall< ::coordinator_proto::CommitAbortKey, ::coordinator_proto::ReplyFromCoordinator, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_reportCommitAbort_, context, request, response);
}

void coordinatorService::Stub::async::reportCommitAbort(::grpc::ClientContext* context, const ::coordinator_proto::CommitAbortKey* request, ::coordinator_proto::ReplyFromCoordinator* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::coordinator_proto::CommitAbortKey, ::coordinator_proto::ReplyFromCoordinator, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_reportCommitAbort_, context, request, response, std::move(f));
}

void coordinatorService::Stub::async::reportCommitAbort(::grpc::ClientContext* context, const ::coordinator_proto::CommitAbortKey* request, ::coordinator_proto::ReplyFromCoordinator* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_reportCommitAbort_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::coordinator_proto::ReplyFromCoordinator>* coordinatorService::Stub::PrepareAsyncreportCommitAbortRaw(::grpc::ClientContext* context, const ::coordinator_proto::CommitAbortKey& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::coordinator_proto::ReplyFromCoordinator, ::coordinator_proto::CommitAbortKey, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_reportCommitAbort_, context, request);
}

::grpc::ClientAsyncResponseReader< ::coordinator_proto::ReplyFromCoordinator>* coordinatorService::Stub::AsyncreportCommitAbortRaw(::grpc::ClientContext* context, const ::coordinator_proto::CommitAbortKey& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncreportCommitAbortRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status coordinatorService::Stub::checkCommitAbort(::grpc::ClientContext* context, const ::coordinator_proto::AskIfSuccess& request, ::coordinator_proto::RepIfSuccess* response) {
  return ::grpc::internal::BlockingUnaryCall< ::coordinator_proto::AskIfSuccess, ::coordinator_proto::RepIfSuccess, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_checkCommitAbort_, context, request, response);
}

void coordinatorService::Stub::async::checkCommitAbort(::grpc::ClientContext* context, const ::coordinator_proto::AskIfSuccess* request, ::coordinator_proto::RepIfSuccess* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::coordinator_proto::AskIfSuccess, ::coordinator_proto::RepIfSuccess, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_checkCommitAbort_, context, request, response, std::move(f));
}

void coordinatorService::Stub::async::checkCommitAbort(::grpc::ClientContext* context, const ::coordinator_proto::AskIfSuccess* request, ::coordinator_proto::RepIfSuccess* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_checkCommitAbort_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::coordinator_proto::RepIfSuccess>* coordinatorService::Stub::PrepareAsynccheckCommitAbortRaw(::grpc::ClientContext* context, const ::coordinator_proto::AskIfSuccess& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::coordinator_proto::RepIfSuccess, ::coordinator_proto::AskIfSuccess, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_checkCommitAbort_, context, request);
}

::grpc::ClientAsyncResponseReader< ::coordinator_proto::RepIfSuccess>* coordinatorService::Stub::AsynccheckCommitAbortRaw(::grpc::ClientContext* context, const ::coordinator_proto::AskIfSuccess& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccheckCommitAbortRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status coordinatorService::Stub::getValue(::grpc::ClientContext* context, const ::coordinator_proto::KeyAndClientIP& request, ::coordinator_proto::RepIfGetSuccess* response) {
  return ::grpc::internal::BlockingUnaryCall< ::coordinator_proto::KeyAndClientIP, ::coordinator_proto::RepIfGetSuccess, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getValue_, context, request, response);
}

void coordinatorService::Stub::async::getValue(::grpc::ClientContext* context, const ::coordinator_proto::KeyAndClientIP* request, ::coordinator_proto::RepIfGetSuccess* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::coordinator_proto::KeyAndClientIP, ::coordinator_proto::RepIfGetSuccess, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getValue_, context, request, response, std::move(f));
}

void coordinatorService::Stub::async::getValue(::grpc::ClientContext* context, const ::coordinator_proto::KeyAndClientIP* request, ::coordinator_proto::RepIfGetSuccess* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getValue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::coordinator_proto::RepIfGetSuccess>* coordinatorService::Stub::PrepareAsyncgetValueRaw(::grpc::ClientContext* context, const ::coordinator_proto::KeyAndClientIP& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::coordinator_proto::RepIfGetSuccess, ::coordinator_proto::KeyAndClientIP, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getValue_, context, request);
}

::grpc::ClientAsyncResponseReader< ::coordinator_proto::RepIfGetSuccess>* coordinatorService::Stub::AsyncgetValueRaw(::grpc::ClientContext* context, const ::coordinator_proto::KeyAndClientIP& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetValueRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status coordinatorService::Stub::delByKey(::grpc::ClientContext* context, const ::coordinator_proto::KeyFromClient& request, ::coordinator_proto::RepIfDeling* response) {
  return ::grpc::internal::BlockingUnaryCall< ::coordinator_proto::KeyFromClient, ::coordinator_proto::RepIfDeling, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_delByKey_, context, request, response);
}

void coordinatorService::Stub::async::delByKey(::grpc::ClientContext* context, const ::coordinator_proto::KeyFromClient* request, ::coordinator_proto::RepIfDeling* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::coordinator_proto::KeyFromClient, ::coordinator_proto::RepIfDeling, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_delByKey_, context, request, response, std::move(f));
}

void coordinatorService::Stub::async::delByKey(::grpc::ClientContext* context, const ::coordinator_proto::KeyFromClient* request, ::coordinator_proto::RepIfDeling* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_delByKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::coordinator_proto::RepIfDeling>* coordinatorService::Stub::PrepareAsyncdelByKeyRaw(::grpc::ClientContext* context, const ::coordinator_proto::KeyFromClient& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::coordinator_proto::RepIfDeling, ::coordinator_proto::KeyFromClient, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_delByKey_, context, request);
}

::grpc::ClientAsyncResponseReader< ::coordinator_proto::RepIfDeling>* coordinatorService::Stub::AsyncdelByKeyRaw(::grpc::ClientContext* context, const ::coordinator_proto::KeyFromClient& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdelByKeyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status coordinatorService::Stub::delByStripe(::grpc::ClientContext* context, const ::coordinator_proto::StripeIdFromClient& request, ::coordinator_proto::RepIfDeling* response) {
  return ::grpc::internal::BlockingUnaryCall< ::coordinator_proto::StripeIdFromClient, ::coordinator_proto::RepIfDeling, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_delByStripe_, context, request, response);
}

void coordinatorService::Stub::async::delByStripe(::grpc::ClientContext* context, const ::coordinator_proto::StripeIdFromClient* request, ::coordinator_proto::RepIfDeling* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::coordinator_proto::StripeIdFromClient, ::coordinator_proto::RepIfDeling, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_delByStripe_, context, request, response, std::move(f));
}

void coordinatorService::Stub::async::delByStripe(::grpc::ClientContext* context, const ::coordinator_proto::StripeIdFromClient* request, ::coordinator_proto::RepIfDeling* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_delByStripe_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::coordinator_proto::RepIfDeling>* coordinatorService::Stub::PrepareAsyncdelByStripeRaw(::grpc::ClientContext* context, const ::coordinator_proto::StripeIdFromClient& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::coordinator_proto::RepIfDeling, ::coordinator_proto::StripeIdFromClient, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_delByStripe_, context, request);
}

::grpc::ClientAsyncResponseReader< ::coordinator_proto::RepIfDeling>* coordinatorService::Stub::AsyncdelByStripeRaw(::grpc::ClientContext* context, const ::coordinator_proto::StripeIdFromClient& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdelByStripeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status coordinatorService::Stub::requestMerge(::grpc::ClientContext* context, const ::coordinator_proto::NumberOfStripesToMerge& request, ::coordinator_proto::RepIfMerged* response) {
  return ::grpc::internal::BlockingUnaryCall< ::coordinator_proto::NumberOfStripesToMerge, ::coordinator_proto::RepIfMerged, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_requestMerge_, context, request, response);
}

void coordinatorService::Stub::async::requestMerge(::grpc::ClientContext* context, const ::coordinator_proto::NumberOfStripesToMerge* request, ::coordinator_proto::RepIfMerged* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::coordinator_proto::NumberOfStripesToMerge, ::coordinator_proto::RepIfMerged, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_requestMerge_, context, request, response, std::move(f));
}

void coordinatorService::Stub::async::requestMerge(::grpc::ClientContext* context, const ::coordinator_proto::NumberOfStripesToMerge* request, ::coordinator_proto::RepIfMerged* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_requestMerge_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::coordinator_proto::RepIfMerged>* coordinatorService::Stub::PrepareAsyncrequestMergeRaw(::grpc::ClientContext* context, const ::coordinator_proto::NumberOfStripesToMerge& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::coordinator_proto::RepIfMerged, ::coordinator_proto::NumberOfStripesToMerge, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_requestMerge_, context, request);
}

::grpc::ClientAsyncResponseReader< ::coordinator_proto::RepIfMerged>* coordinatorService::Stub::AsyncrequestMergeRaw(::grpc::ClientContext* context, const ::coordinator_proto::NumberOfStripesToMerge& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrequestMergeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status coordinatorService::Stub::listStripes(::grpc::ClientContext* context, const ::coordinator_proto::RequestToCoordinator& request, ::coordinator_proto::RepStripeIds* response) {
  return ::grpc::internal::BlockingUnaryCall< ::coordinator_proto::RequestToCoordinator, ::coordinator_proto::RepStripeIds, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_listStripes_, context, request, response);
}

void coordinatorService::Stub::async::listStripes(::grpc::ClientContext* context, const ::coordinator_proto::RequestToCoordinator* request, ::coordinator_proto::RepStripeIds* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::coordinator_proto::RequestToCoordinator, ::coordinator_proto::RepStripeIds, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_listStripes_, context, request, response, std::move(f));
}

void coordinatorService::Stub::async::listStripes(::grpc::ClientContext* context, const ::coordinator_proto::RequestToCoordinator* request, ::coordinator_proto::RepStripeIds* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_listStripes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::coordinator_proto::RepStripeIds>* coordinatorService::Stub::PrepareAsynclistStripesRaw(::grpc::ClientContext* context, const ::coordinator_proto::RequestToCoordinator& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::coordinator_proto::RepStripeIds, ::coordinator_proto::RequestToCoordinator, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_listStripes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::coordinator_proto::RepStripeIds>* coordinatorService::Stub::AsynclistStripesRaw(::grpc::ClientContext* context, const ::coordinator_proto::RequestToCoordinator& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynclistStripesRaw(context, request, cq);
  result->StartCall();
  return result;
}

coordinatorService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      coordinatorService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< coordinatorService::Service, ::coordinator_proto::RequestToCoordinator, ::coordinator_proto::ReplyFromCoordinator, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](coordinatorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::coordinator_proto::RequestToCoordinator* req,
             ::coordinator_proto::ReplyFromCoordinator* resp) {
               return service->sayHelloToCoordinator(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      coordinatorService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< coordinatorService::Service, ::coordinator_proto::RequestToCoordinator, ::coordinator_proto::ReplyFromCoordinator, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](coordinatorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::coordinator_proto::RequestToCoordinator* req,
             ::coordinator_proto::ReplyFromCoordinator* resp) {
               return service->checkalive(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      coordinatorService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< coordinatorService::Service, ::coordinator_proto::Parameter, ::coordinator_proto::RepIfSetParaSuccess, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](coordinatorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::coordinator_proto::Parameter* req,
             ::coordinator_proto::RepIfSetParaSuccess* resp) {
               return service->setParameter(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      coordinatorService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< coordinatorService::Service, ::coordinator_proto::RequestProxyIPPort, ::coordinator_proto::ReplyProxyIPPort, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](coordinatorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::coordinator_proto::RequestProxyIPPort* req,
             ::coordinator_proto::ReplyProxyIPPort* resp) {
               return service->uploadOriginKeyValue(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      coordinatorService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< coordinatorService::Service, ::coordinator_proto::CommitAbortKey, ::coordinator_proto::ReplyFromCoordinator, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](coordinatorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::coordinator_proto::CommitAbortKey* req,
             ::coordinator_proto::ReplyFromCoordinator* resp) {
               return service->reportCommitAbort(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      coordinatorService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< coordinatorService::Service, ::coordinator_proto::AskIfSuccess, ::coordinator_proto::RepIfSuccess, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](coordinatorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::coordinator_proto::AskIfSuccess* req,
             ::coordinator_proto::RepIfSuccess* resp) {
               return service->checkCommitAbort(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      coordinatorService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< coordinatorService::Service, ::coordinator_proto::KeyAndClientIP, ::coordinator_proto::RepIfGetSuccess, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](coordinatorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::coordinator_proto::KeyAndClientIP* req,
             ::coordinator_proto::RepIfGetSuccess* resp) {
               return service->getValue(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      coordinatorService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< coordinatorService::Service, ::coordinator_proto::KeyFromClient, ::coordinator_proto::RepIfDeling, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](coordinatorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::coordinator_proto::KeyFromClient* req,
             ::coordinator_proto::RepIfDeling* resp) {
               return service->delByKey(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      coordinatorService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< coordinatorService::Service, ::coordinator_proto::StripeIdFromClient, ::coordinator_proto::RepIfDeling, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](coordinatorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::coordinator_proto::StripeIdFromClient* req,
             ::coordinator_proto::RepIfDeling* resp) {
               return service->delByStripe(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      coordinatorService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< coordinatorService::Service, ::coordinator_proto::NumberOfStripesToMerge, ::coordinator_proto::RepIfMerged, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](coordinatorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::coordinator_proto::NumberOfStripesToMerge* req,
             ::coordinator_proto::RepIfMerged* resp) {
               return service->requestMerge(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      coordinatorService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< coordinatorService::Service, ::coordinator_proto::RequestToCoordinator, ::coordinator_proto::RepStripeIds, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](coordinatorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::coordinator_proto::RequestToCoordinator* req,
             ::coordinator_proto::RepStripeIds* resp) {
               return service->listStripes(ctx, req, resp);
             }, this)));
}

coordinatorService::Service::~Service() {
}

::grpc::Status coordinatorService::Service::sayHelloToCoordinator(::grpc::ServerContext* context, const ::coordinator_proto::RequestToCoordinator* request, ::coordinator_proto::ReplyFromCoordinator* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status coordinatorService::Service::checkalive(::grpc::ServerContext* context, const ::coordinator_proto::RequestToCoordinator* request, ::coordinator_proto::ReplyFromCoordinator* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status coordinatorService::Service::setParameter(::grpc::ServerContext* context, const ::coordinator_proto::Parameter* request, ::coordinator_proto::RepIfSetParaSuccess* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status coordinatorService::Service::uploadOriginKeyValue(::grpc::ServerContext* context, const ::coordinator_proto::RequestProxyIPPort* request, ::coordinator_proto::ReplyProxyIPPort* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status coordinatorService::Service::reportCommitAbort(::grpc::ServerContext* context, const ::coordinator_proto::CommitAbortKey* request, ::coordinator_proto::ReplyFromCoordinator* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status coordinatorService::Service::checkCommitAbort(::grpc::ServerContext* context, const ::coordinator_proto::AskIfSuccess* request, ::coordinator_proto::RepIfSuccess* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status coordinatorService::Service::getValue(::grpc::ServerContext* context, const ::coordinator_proto::KeyAndClientIP* request, ::coordinator_proto::RepIfGetSuccess* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status coordinatorService::Service::delByKey(::grpc::ServerContext* context, const ::coordinator_proto::KeyFromClient* request, ::coordinator_proto::RepIfDeling* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status coordinatorService::Service::delByStripe(::grpc::ServerContext* context, const ::coordinator_proto::StripeIdFromClient* request, ::coordinator_proto::RepIfDeling* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status coordinatorService::Service::requestMerge(::grpc::ServerContext* context, const ::coordinator_proto::NumberOfStripesToMerge* request, ::coordinator_proto::RepIfMerged* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status coordinatorService::Service::listStripes(::grpc::ServerContext* context, const ::coordinator_proto::RequestToCoordinator* request, ::coordinator_proto::RepStripeIds* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace coordinator_proto

