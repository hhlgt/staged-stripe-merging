// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proxy.proto
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_proxy_2eproto__INCLUDED
#define GRPC_proxy_2eproto__INCLUDED

#include "proxy.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace proxy_proto {

// The greeting service definition.
class proxyService final {
 public:
  static constexpr char const* service_full_name() {
    return "proxy_proto.proxyService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends a greeting
    virtual ::grpc::Status checkalive(::grpc::ClientContext* context, const ::proxy_proto::CheckaliveCMD& request, ::proxy_proto::RequestResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::RequestResult>> Asynccheckalive(::grpc::ClientContext* context, const ::proxy_proto::CheckaliveCMD& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::RequestResult>>(AsynccheckaliveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::RequestResult>> PrepareAsynccheckalive(::grpc::ClientContext* context, const ::proxy_proto::CheckaliveCMD& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::RequestResult>>(PrepareAsynccheckaliveRaw(context, request, cq));
    }
    // encode and set
    virtual ::grpc::Status encodeAndSetObject(::grpc::ClientContext* context, const ::proxy_proto::ObjectAndPlacement& request, ::proxy_proto::SetReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::SetReply>> AsyncencodeAndSetObject(::grpc::ClientContext* context, const ::proxy_proto::ObjectAndPlacement& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::SetReply>>(AsyncencodeAndSetObjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::SetReply>> PrepareAsyncencodeAndSetObject(::grpc::ClientContext* context, const ::proxy_proto::ObjectAndPlacement& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::SetReply>>(PrepareAsyncencodeAndSetObjectRaw(context, request, cq));
    }
    // get and decode
    virtual ::grpc::Status decodeAndGetObject(::grpc::ClientContext* context, const ::proxy_proto::ObjectAndPlacement& request, ::proxy_proto::GetReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::GetReply>> AsyncdecodeAndGetObject(::grpc::ClientContext* context, const ::proxy_proto::ObjectAndPlacement& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::GetReply>>(AsyncdecodeAndGetObjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::GetReply>> PrepareAsyncdecodeAndGetObject(::grpc::ClientContext* context, const ::proxy_proto::ObjectAndPlacement& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::GetReply>>(PrepareAsyncdecodeAndGetObjectRaw(context, request, cq));
    }
    // delete
    virtual ::grpc::Status deleteBlock(::grpc::ClientContext* context, const ::proxy_proto::NodeAndBlock& request, ::proxy_proto::DelReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::DelReply>> AsyncdeleteBlock(::grpc::ClientContext* context, const ::proxy_proto::NodeAndBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::DelReply>>(AsyncdeleteBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::DelReply>> PrepareAsyncdeleteBlock(::grpc::ClientContext* context, const ::proxy_proto::NodeAndBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::DelReply>>(PrepareAsyncdeleteBlockRaw(context, request, cq));
    }
    // lrcwidestripe, merge
    // parity block recalculation
    virtual ::grpc::Status mainRecal(::grpc::ClientContext* context, const ::proxy_proto::mainRecalPlan& request, ::proxy_proto::RecalReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::RecalReply>> AsyncmainRecal(::grpc::ClientContext* context, const ::proxy_proto::mainRecalPlan& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::RecalReply>>(AsyncmainRecalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::RecalReply>> PrepareAsyncmainRecal(::grpc::ClientContext* context, const ::proxy_proto::mainRecalPlan& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::RecalReply>>(PrepareAsyncmainRecalRaw(context, request, cq));
    }
    virtual ::grpc::Status helpRecal(::grpc::ClientContext* context, const ::proxy_proto::helpRecalPlan& request, ::proxy_proto::RecalReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::RecalReply>> AsynchelpRecal(::grpc::ClientContext* context, const ::proxy_proto::helpRecalPlan& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::RecalReply>>(AsynchelpRecalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::RecalReply>> PrepareAsynchelpRecal(::grpc::ClientContext* context, const ::proxy_proto::helpRecalPlan& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::RecalReply>>(PrepareAsynchelpRecalRaw(context, request, cq));
    }
    // block relocation
    virtual ::grpc::Status blockReloc(::grpc::ClientContext* context, const ::proxy_proto::blockRelocPlan& request, ::proxy_proto::blockRelocReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::blockRelocReply>> AsyncblockReloc(::grpc::ClientContext* context, const ::proxy_proto::blockRelocPlan& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::blockRelocReply>>(AsyncblockRelocRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::blockRelocReply>> PrepareAsyncblockReloc(::grpc::ClientContext* context, const ::proxy_proto::blockRelocPlan& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::blockRelocReply>>(PrepareAsyncblockRelocRaw(context, request, cq));
    }
    virtual ::grpc::Status checkStep(::grpc::ClientContext* context, const ::proxy_proto::AskIfSuccess& request, ::proxy_proto::RepIfSuccess* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::RepIfSuccess>> AsynccheckStep(::grpc::ClientContext* context, const ::proxy_proto::AskIfSuccess& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::RepIfSuccess>>(AsynccheckStepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::RepIfSuccess>> PrepareAsynccheckStep(::grpc::ClientContext* context, const ::proxy_proto::AskIfSuccess& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::RepIfSuccess>>(PrepareAsynccheckStepRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Sends a greeting
      virtual void checkalive(::grpc::ClientContext* context, const ::proxy_proto::CheckaliveCMD* request, ::proxy_proto::RequestResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void checkalive(::grpc::ClientContext* context, const ::proxy_proto::CheckaliveCMD* request, ::proxy_proto::RequestResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // encode and set
      virtual void encodeAndSetObject(::grpc::ClientContext* context, const ::proxy_proto::ObjectAndPlacement* request, ::proxy_proto::SetReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void encodeAndSetObject(::grpc::ClientContext* context, const ::proxy_proto::ObjectAndPlacement* request, ::proxy_proto::SetReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // get and decode
      virtual void decodeAndGetObject(::grpc::ClientContext* context, const ::proxy_proto::ObjectAndPlacement* request, ::proxy_proto::GetReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void decodeAndGetObject(::grpc::ClientContext* context, const ::proxy_proto::ObjectAndPlacement* request, ::proxy_proto::GetReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // delete
      virtual void deleteBlock(::grpc::ClientContext* context, const ::proxy_proto::NodeAndBlock* request, ::proxy_proto::DelReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void deleteBlock(::grpc::ClientContext* context, const ::proxy_proto::NodeAndBlock* request, ::proxy_proto::DelReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // lrcwidestripe, merge
      // parity block recalculation
      virtual void mainRecal(::grpc::ClientContext* context, const ::proxy_proto::mainRecalPlan* request, ::proxy_proto::RecalReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void mainRecal(::grpc::ClientContext* context, const ::proxy_proto::mainRecalPlan* request, ::proxy_proto::RecalReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void helpRecal(::grpc::ClientContext* context, const ::proxy_proto::helpRecalPlan* request, ::proxy_proto::RecalReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void helpRecal(::grpc::ClientContext* context, const ::proxy_proto::helpRecalPlan* request, ::proxy_proto::RecalReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // block relocation
      virtual void blockReloc(::grpc::ClientContext* context, const ::proxy_proto::blockRelocPlan* request, ::proxy_proto::blockRelocReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void blockReloc(::grpc::ClientContext* context, const ::proxy_proto::blockRelocPlan* request, ::proxy_proto::blockRelocReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void checkStep(::grpc::ClientContext* context, const ::proxy_proto::AskIfSuccess* request, ::proxy_proto::RepIfSuccess* response, std::function<void(::grpc::Status)>) = 0;
      virtual void checkStep(::grpc::ClientContext* context, const ::proxy_proto::AskIfSuccess* request, ::proxy_proto::RepIfSuccess* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::RequestResult>* AsynccheckaliveRaw(::grpc::ClientContext* context, const ::proxy_proto::CheckaliveCMD& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::RequestResult>* PrepareAsynccheckaliveRaw(::grpc::ClientContext* context, const ::proxy_proto::CheckaliveCMD& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::SetReply>* AsyncencodeAndSetObjectRaw(::grpc::ClientContext* context, const ::proxy_proto::ObjectAndPlacement& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::SetReply>* PrepareAsyncencodeAndSetObjectRaw(::grpc::ClientContext* context, const ::proxy_proto::ObjectAndPlacement& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::GetReply>* AsyncdecodeAndGetObjectRaw(::grpc::ClientContext* context, const ::proxy_proto::ObjectAndPlacement& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::GetReply>* PrepareAsyncdecodeAndGetObjectRaw(::grpc::ClientContext* context, const ::proxy_proto::ObjectAndPlacement& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::DelReply>* AsyncdeleteBlockRaw(::grpc::ClientContext* context, const ::proxy_proto::NodeAndBlock& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::DelReply>* PrepareAsyncdeleteBlockRaw(::grpc::ClientContext* context, const ::proxy_proto::NodeAndBlock& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::RecalReply>* AsyncmainRecalRaw(::grpc::ClientContext* context, const ::proxy_proto::mainRecalPlan& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::RecalReply>* PrepareAsyncmainRecalRaw(::grpc::ClientContext* context, const ::proxy_proto::mainRecalPlan& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::RecalReply>* AsynchelpRecalRaw(::grpc::ClientContext* context, const ::proxy_proto::helpRecalPlan& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::RecalReply>* PrepareAsynchelpRecalRaw(::grpc::ClientContext* context, const ::proxy_proto::helpRecalPlan& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::blockRelocReply>* AsyncblockRelocRaw(::grpc::ClientContext* context, const ::proxy_proto::blockRelocPlan& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::blockRelocReply>* PrepareAsyncblockRelocRaw(::grpc::ClientContext* context, const ::proxy_proto::blockRelocPlan& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::RepIfSuccess>* AsynccheckStepRaw(::grpc::ClientContext* context, const ::proxy_proto::AskIfSuccess& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proxy_proto::RepIfSuccess>* PrepareAsynccheckStepRaw(::grpc::ClientContext* context, const ::proxy_proto::AskIfSuccess& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status checkalive(::grpc::ClientContext* context, const ::proxy_proto::CheckaliveCMD& request, ::proxy_proto::RequestResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proxy_proto::RequestResult>> Asynccheckalive(::grpc::ClientContext* context, const ::proxy_proto::CheckaliveCMD& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proxy_proto::RequestResult>>(AsynccheckaliveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proxy_proto::RequestResult>> PrepareAsynccheckalive(::grpc::ClientContext* context, const ::proxy_proto::CheckaliveCMD& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proxy_proto::RequestResult>>(PrepareAsynccheckaliveRaw(context, request, cq));
    }
    ::grpc::Status encodeAndSetObject(::grpc::ClientContext* context, const ::proxy_proto::ObjectAndPlacement& request, ::proxy_proto::SetReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proxy_proto::SetReply>> AsyncencodeAndSetObject(::grpc::ClientContext* context, const ::proxy_proto::ObjectAndPlacement& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proxy_proto::SetReply>>(AsyncencodeAndSetObjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proxy_proto::SetReply>> PrepareAsyncencodeAndSetObject(::grpc::ClientContext* context, const ::proxy_proto::ObjectAndPlacement& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proxy_proto::SetReply>>(PrepareAsyncencodeAndSetObjectRaw(context, request, cq));
    }
    ::grpc::Status decodeAndGetObject(::grpc::ClientContext* context, const ::proxy_proto::ObjectAndPlacement& request, ::proxy_proto::GetReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proxy_proto::GetReply>> AsyncdecodeAndGetObject(::grpc::ClientContext* context, const ::proxy_proto::ObjectAndPlacement& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proxy_proto::GetReply>>(AsyncdecodeAndGetObjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proxy_proto::GetReply>> PrepareAsyncdecodeAndGetObject(::grpc::ClientContext* context, const ::proxy_proto::ObjectAndPlacement& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proxy_proto::GetReply>>(PrepareAsyncdecodeAndGetObjectRaw(context, request, cq));
    }
    ::grpc::Status deleteBlock(::grpc::ClientContext* context, const ::proxy_proto::NodeAndBlock& request, ::proxy_proto::DelReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proxy_proto::DelReply>> AsyncdeleteBlock(::grpc::ClientContext* context, const ::proxy_proto::NodeAndBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proxy_proto::DelReply>>(AsyncdeleteBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proxy_proto::DelReply>> PrepareAsyncdeleteBlock(::grpc::ClientContext* context, const ::proxy_proto::NodeAndBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proxy_proto::DelReply>>(PrepareAsyncdeleteBlockRaw(context, request, cq));
    }
    ::grpc::Status mainRecal(::grpc::ClientContext* context, const ::proxy_proto::mainRecalPlan& request, ::proxy_proto::RecalReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proxy_proto::RecalReply>> AsyncmainRecal(::grpc::ClientContext* context, const ::proxy_proto::mainRecalPlan& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proxy_proto::RecalReply>>(AsyncmainRecalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proxy_proto::RecalReply>> PrepareAsyncmainRecal(::grpc::ClientContext* context, const ::proxy_proto::mainRecalPlan& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proxy_proto::RecalReply>>(PrepareAsyncmainRecalRaw(context, request, cq));
    }
    ::grpc::Status helpRecal(::grpc::ClientContext* context, const ::proxy_proto::helpRecalPlan& request, ::proxy_proto::RecalReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proxy_proto::RecalReply>> AsynchelpRecal(::grpc::ClientContext* context, const ::proxy_proto::helpRecalPlan& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proxy_proto::RecalReply>>(AsynchelpRecalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proxy_proto::RecalReply>> PrepareAsynchelpRecal(::grpc::ClientContext* context, const ::proxy_proto::helpRecalPlan& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proxy_proto::RecalReply>>(PrepareAsynchelpRecalRaw(context, request, cq));
    }
    ::grpc::Status blockReloc(::grpc::ClientContext* context, const ::proxy_proto::blockRelocPlan& request, ::proxy_proto::blockRelocReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proxy_proto::blockRelocReply>> AsyncblockReloc(::grpc::ClientContext* context, const ::proxy_proto::blockRelocPlan& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proxy_proto::blockRelocReply>>(AsyncblockRelocRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proxy_proto::blockRelocReply>> PrepareAsyncblockReloc(::grpc::ClientContext* context, const ::proxy_proto::blockRelocPlan& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proxy_proto::blockRelocReply>>(PrepareAsyncblockRelocRaw(context, request, cq));
    }
    ::grpc::Status checkStep(::grpc::ClientContext* context, const ::proxy_proto::AskIfSuccess& request, ::proxy_proto::RepIfSuccess* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proxy_proto::RepIfSuccess>> AsynccheckStep(::grpc::ClientContext* context, const ::proxy_proto::AskIfSuccess& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proxy_proto::RepIfSuccess>>(AsynccheckStepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proxy_proto::RepIfSuccess>> PrepareAsynccheckStep(::grpc::ClientContext* context, const ::proxy_proto::AskIfSuccess& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proxy_proto::RepIfSuccess>>(PrepareAsynccheckStepRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void checkalive(::grpc::ClientContext* context, const ::proxy_proto::CheckaliveCMD* request, ::proxy_proto::RequestResult* response, std::function<void(::grpc::Status)>) override;
      void checkalive(::grpc::ClientContext* context, const ::proxy_proto::CheckaliveCMD* request, ::proxy_proto::RequestResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void encodeAndSetObject(::grpc::ClientContext* context, const ::proxy_proto::ObjectAndPlacement* request, ::proxy_proto::SetReply* response, std::function<void(::grpc::Status)>) override;
      void encodeAndSetObject(::grpc::ClientContext* context, const ::proxy_proto::ObjectAndPlacement* request, ::proxy_proto::SetReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void decodeAndGetObject(::grpc::ClientContext* context, const ::proxy_proto::ObjectAndPlacement* request, ::proxy_proto::GetReply* response, std::function<void(::grpc::Status)>) override;
      void decodeAndGetObject(::grpc::ClientContext* context, const ::proxy_proto::ObjectAndPlacement* request, ::proxy_proto::GetReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void deleteBlock(::grpc::ClientContext* context, const ::proxy_proto::NodeAndBlock* request, ::proxy_proto::DelReply* response, std::function<void(::grpc::Status)>) override;
      void deleteBlock(::grpc::ClientContext* context, const ::proxy_proto::NodeAndBlock* request, ::proxy_proto::DelReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void mainRecal(::grpc::ClientContext* context, const ::proxy_proto::mainRecalPlan* request, ::proxy_proto::RecalReply* response, std::function<void(::grpc::Status)>) override;
      void mainRecal(::grpc::ClientContext* context, const ::proxy_proto::mainRecalPlan* request, ::proxy_proto::RecalReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void helpRecal(::grpc::ClientContext* context, const ::proxy_proto::helpRecalPlan* request, ::proxy_proto::RecalReply* response, std::function<void(::grpc::Status)>) override;
      void helpRecal(::grpc::ClientContext* context, const ::proxy_proto::helpRecalPlan* request, ::proxy_proto::RecalReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void blockReloc(::grpc::ClientContext* context, const ::proxy_proto::blockRelocPlan* request, ::proxy_proto::blockRelocReply* response, std::function<void(::grpc::Status)>) override;
      void blockReloc(::grpc::ClientContext* context, const ::proxy_proto::blockRelocPlan* request, ::proxy_proto::blockRelocReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void checkStep(::grpc::ClientContext* context, const ::proxy_proto::AskIfSuccess* request, ::proxy_proto::RepIfSuccess* response, std::function<void(::grpc::Status)>) override;
      void checkStep(::grpc::ClientContext* context, const ::proxy_proto::AskIfSuccess* request, ::proxy_proto::RepIfSuccess* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::proxy_proto::RequestResult>* AsynccheckaliveRaw(::grpc::ClientContext* context, const ::proxy_proto::CheckaliveCMD& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proxy_proto::RequestResult>* PrepareAsynccheckaliveRaw(::grpc::ClientContext* context, const ::proxy_proto::CheckaliveCMD& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proxy_proto::SetReply>* AsyncencodeAndSetObjectRaw(::grpc::ClientContext* context, const ::proxy_proto::ObjectAndPlacement& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proxy_proto::SetReply>* PrepareAsyncencodeAndSetObjectRaw(::grpc::ClientContext* context, const ::proxy_proto::ObjectAndPlacement& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proxy_proto::GetReply>* AsyncdecodeAndGetObjectRaw(::grpc::ClientContext* context, const ::proxy_proto::ObjectAndPlacement& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proxy_proto::GetReply>* PrepareAsyncdecodeAndGetObjectRaw(::grpc::ClientContext* context, const ::proxy_proto::ObjectAndPlacement& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proxy_proto::DelReply>* AsyncdeleteBlockRaw(::grpc::ClientContext* context, const ::proxy_proto::NodeAndBlock& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proxy_proto::DelReply>* PrepareAsyncdeleteBlockRaw(::grpc::ClientContext* context, const ::proxy_proto::NodeAndBlock& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proxy_proto::RecalReply>* AsyncmainRecalRaw(::grpc::ClientContext* context, const ::proxy_proto::mainRecalPlan& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proxy_proto::RecalReply>* PrepareAsyncmainRecalRaw(::grpc::ClientContext* context, const ::proxy_proto::mainRecalPlan& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proxy_proto::RecalReply>* AsynchelpRecalRaw(::grpc::ClientContext* context, const ::proxy_proto::helpRecalPlan& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proxy_proto::RecalReply>* PrepareAsynchelpRecalRaw(::grpc::ClientContext* context, const ::proxy_proto::helpRecalPlan& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proxy_proto::blockRelocReply>* AsyncblockRelocRaw(::grpc::ClientContext* context, const ::proxy_proto::blockRelocPlan& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proxy_proto::blockRelocReply>* PrepareAsyncblockRelocRaw(::grpc::ClientContext* context, const ::proxy_proto::blockRelocPlan& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proxy_proto::RepIfSuccess>* AsynccheckStepRaw(::grpc::ClientContext* context, const ::proxy_proto::AskIfSuccess& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proxy_proto::RepIfSuccess>* PrepareAsynccheckStepRaw(::grpc::ClientContext* context, const ::proxy_proto::AskIfSuccess& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_checkalive_;
    const ::grpc::internal::RpcMethod rpcmethod_encodeAndSetObject_;
    const ::grpc::internal::RpcMethod rpcmethod_decodeAndGetObject_;
    const ::grpc::internal::RpcMethod rpcmethod_deleteBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_mainRecal_;
    const ::grpc::internal::RpcMethod rpcmethod_helpRecal_;
    const ::grpc::internal::RpcMethod rpcmethod_blockReloc_;
    const ::grpc::internal::RpcMethod rpcmethod_checkStep_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends a greeting
    virtual ::grpc::Status checkalive(::grpc::ServerContext* context, const ::proxy_proto::CheckaliveCMD* request, ::proxy_proto::RequestResult* response);
    // encode and set
    virtual ::grpc::Status encodeAndSetObject(::grpc::ServerContext* context, const ::proxy_proto::ObjectAndPlacement* request, ::proxy_proto::SetReply* response);
    // get and decode
    virtual ::grpc::Status decodeAndGetObject(::grpc::ServerContext* context, const ::proxy_proto::ObjectAndPlacement* request, ::proxy_proto::GetReply* response);
    // delete
    virtual ::grpc::Status deleteBlock(::grpc::ServerContext* context, const ::proxy_proto::NodeAndBlock* request, ::proxy_proto::DelReply* response);
    // lrcwidestripe, merge
    // parity block recalculation
    virtual ::grpc::Status mainRecal(::grpc::ServerContext* context, const ::proxy_proto::mainRecalPlan* request, ::proxy_proto::RecalReply* response);
    virtual ::grpc::Status helpRecal(::grpc::ServerContext* context, const ::proxy_proto::helpRecalPlan* request, ::proxy_proto::RecalReply* response);
    // block relocation
    virtual ::grpc::Status blockReloc(::grpc::ServerContext* context, const ::proxy_proto::blockRelocPlan* request, ::proxy_proto::blockRelocReply* response);
    virtual ::grpc::Status checkStep(::grpc::ServerContext* context, const ::proxy_proto::AskIfSuccess* request, ::proxy_proto::RepIfSuccess* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_checkalive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_checkalive() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_checkalive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkalive(::grpc::ServerContext* /*context*/, const ::proxy_proto::CheckaliveCMD* /*request*/, ::proxy_proto::RequestResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcheckalive(::grpc::ServerContext* context, ::proxy_proto::CheckaliveCMD* request, ::grpc::ServerAsyncResponseWriter< ::proxy_proto::RequestResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_encodeAndSetObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_encodeAndSetObject() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_encodeAndSetObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status encodeAndSetObject(::grpc::ServerContext* /*context*/, const ::proxy_proto::ObjectAndPlacement* /*request*/, ::proxy_proto::SetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestencodeAndSetObject(::grpc::ServerContext* context, ::proxy_proto::ObjectAndPlacement* request, ::grpc::ServerAsyncResponseWriter< ::proxy_proto::SetReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_decodeAndGetObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_decodeAndGetObject() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_decodeAndGetObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status decodeAndGetObject(::grpc::ServerContext* /*context*/, const ::proxy_proto::ObjectAndPlacement* /*request*/, ::proxy_proto::GetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdecodeAndGetObject(::grpc::ServerContext* context, ::proxy_proto::ObjectAndPlacement* request, ::grpc::ServerAsyncResponseWriter< ::proxy_proto::GetReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_deleteBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_deleteBlock() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_deleteBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteBlock(::grpc::ServerContext* /*context*/, const ::proxy_proto::NodeAndBlock* /*request*/, ::proxy_proto::DelReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteBlock(::grpc::ServerContext* context, ::proxy_proto::NodeAndBlock* request, ::grpc::ServerAsyncResponseWriter< ::proxy_proto::DelReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_mainRecal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_mainRecal() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_mainRecal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status mainRecal(::grpc::ServerContext* /*context*/, const ::proxy_proto::mainRecalPlan* /*request*/, ::proxy_proto::RecalReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestmainRecal(::grpc::ServerContext* context, ::proxy_proto::mainRecalPlan* request, ::grpc::ServerAsyncResponseWriter< ::proxy_proto::RecalReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_helpRecal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_helpRecal() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_helpRecal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status helpRecal(::grpc::ServerContext* /*context*/, const ::proxy_proto::helpRecalPlan* /*request*/, ::proxy_proto::RecalReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesthelpRecal(::grpc::ServerContext* context, ::proxy_proto::helpRecalPlan* request, ::grpc::ServerAsyncResponseWriter< ::proxy_proto::RecalReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_blockReloc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_blockReloc() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_blockReloc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status blockReloc(::grpc::ServerContext* /*context*/, const ::proxy_proto::blockRelocPlan* /*request*/, ::proxy_proto::blockRelocReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestblockReloc(::grpc::ServerContext* context, ::proxy_proto::blockRelocPlan* request, ::grpc::ServerAsyncResponseWriter< ::proxy_proto::blockRelocReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_checkStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_checkStep() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_checkStep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkStep(::grpc::ServerContext* /*context*/, const ::proxy_proto::AskIfSuccess* /*request*/, ::proxy_proto::RepIfSuccess* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcheckStep(::grpc::ServerContext* context, ::proxy_proto::AskIfSuccess* request, ::grpc::ServerAsyncResponseWriter< ::proxy_proto::RepIfSuccess>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_checkalive<WithAsyncMethod_encodeAndSetObject<WithAsyncMethod_decodeAndGetObject<WithAsyncMethod_deleteBlock<WithAsyncMethod_mainRecal<WithAsyncMethod_helpRecal<WithAsyncMethod_blockReloc<WithAsyncMethod_checkStep<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_checkalive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_checkalive() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::proxy_proto::CheckaliveCMD, ::proxy_proto::RequestResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proxy_proto::CheckaliveCMD* request, ::proxy_proto::RequestResult* response) { return this->checkalive(context, request, response); }));}
    void SetMessageAllocatorFor_checkalive(
        ::grpc::MessageAllocator< ::proxy_proto::CheckaliveCMD, ::proxy_proto::RequestResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proxy_proto::CheckaliveCMD, ::proxy_proto::RequestResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_checkalive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkalive(::grpc::ServerContext* /*context*/, const ::proxy_proto::CheckaliveCMD* /*request*/, ::proxy_proto::RequestResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* checkalive(
      ::grpc::CallbackServerContext* /*context*/, const ::proxy_proto::CheckaliveCMD* /*request*/, ::proxy_proto::RequestResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_encodeAndSetObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_encodeAndSetObject() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::proxy_proto::ObjectAndPlacement, ::proxy_proto::SetReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proxy_proto::ObjectAndPlacement* request, ::proxy_proto::SetReply* response) { return this->encodeAndSetObject(context, request, response); }));}
    void SetMessageAllocatorFor_encodeAndSetObject(
        ::grpc::MessageAllocator< ::proxy_proto::ObjectAndPlacement, ::proxy_proto::SetReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proxy_proto::ObjectAndPlacement, ::proxy_proto::SetReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_encodeAndSetObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status encodeAndSetObject(::grpc::ServerContext* /*context*/, const ::proxy_proto::ObjectAndPlacement* /*request*/, ::proxy_proto::SetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* encodeAndSetObject(
      ::grpc::CallbackServerContext* /*context*/, const ::proxy_proto::ObjectAndPlacement* /*request*/, ::proxy_proto::SetReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_decodeAndGetObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_decodeAndGetObject() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::proxy_proto::ObjectAndPlacement, ::proxy_proto::GetReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proxy_proto::ObjectAndPlacement* request, ::proxy_proto::GetReply* response) { return this->decodeAndGetObject(context, request, response); }));}
    void SetMessageAllocatorFor_decodeAndGetObject(
        ::grpc::MessageAllocator< ::proxy_proto::ObjectAndPlacement, ::proxy_proto::GetReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proxy_proto::ObjectAndPlacement, ::proxy_proto::GetReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_decodeAndGetObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status decodeAndGetObject(::grpc::ServerContext* /*context*/, const ::proxy_proto::ObjectAndPlacement* /*request*/, ::proxy_proto::GetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* decodeAndGetObject(
      ::grpc::CallbackServerContext* /*context*/, const ::proxy_proto::ObjectAndPlacement* /*request*/, ::proxy_proto::GetReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_deleteBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_deleteBlock() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::proxy_proto::NodeAndBlock, ::proxy_proto::DelReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proxy_proto::NodeAndBlock* request, ::proxy_proto::DelReply* response) { return this->deleteBlock(context, request, response); }));}
    void SetMessageAllocatorFor_deleteBlock(
        ::grpc::MessageAllocator< ::proxy_proto::NodeAndBlock, ::proxy_proto::DelReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proxy_proto::NodeAndBlock, ::proxy_proto::DelReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_deleteBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteBlock(::grpc::ServerContext* /*context*/, const ::proxy_proto::NodeAndBlock* /*request*/, ::proxy_proto::DelReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deleteBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::proxy_proto::NodeAndBlock* /*request*/, ::proxy_proto::DelReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_mainRecal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_mainRecal() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::proxy_proto::mainRecalPlan, ::proxy_proto::RecalReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proxy_proto::mainRecalPlan* request, ::proxy_proto::RecalReply* response) { return this->mainRecal(context, request, response); }));}
    void SetMessageAllocatorFor_mainRecal(
        ::grpc::MessageAllocator< ::proxy_proto::mainRecalPlan, ::proxy_proto::RecalReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proxy_proto::mainRecalPlan, ::proxy_proto::RecalReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_mainRecal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status mainRecal(::grpc::ServerContext* /*context*/, const ::proxy_proto::mainRecalPlan* /*request*/, ::proxy_proto::RecalReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* mainRecal(
      ::grpc::CallbackServerContext* /*context*/, const ::proxy_proto::mainRecalPlan* /*request*/, ::proxy_proto::RecalReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_helpRecal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_helpRecal() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::proxy_proto::helpRecalPlan, ::proxy_proto::RecalReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proxy_proto::helpRecalPlan* request, ::proxy_proto::RecalReply* response) { return this->helpRecal(context, request, response); }));}
    void SetMessageAllocatorFor_helpRecal(
        ::grpc::MessageAllocator< ::proxy_proto::helpRecalPlan, ::proxy_proto::RecalReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proxy_proto::helpRecalPlan, ::proxy_proto::RecalReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_helpRecal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status helpRecal(::grpc::ServerContext* /*context*/, const ::proxy_proto::helpRecalPlan* /*request*/, ::proxy_proto::RecalReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* helpRecal(
      ::grpc::CallbackServerContext* /*context*/, const ::proxy_proto::helpRecalPlan* /*request*/, ::proxy_proto::RecalReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_blockReloc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_blockReloc() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::proxy_proto::blockRelocPlan, ::proxy_proto::blockRelocReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proxy_proto::blockRelocPlan* request, ::proxy_proto::blockRelocReply* response) { return this->blockReloc(context, request, response); }));}
    void SetMessageAllocatorFor_blockReloc(
        ::grpc::MessageAllocator< ::proxy_proto::blockRelocPlan, ::proxy_proto::blockRelocReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proxy_proto::blockRelocPlan, ::proxy_proto::blockRelocReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_blockReloc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status blockReloc(::grpc::ServerContext* /*context*/, const ::proxy_proto::blockRelocPlan* /*request*/, ::proxy_proto::blockRelocReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* blockReloc(
      ::grpc::CallbackServerContext* /*context*/, const ::proxy_proto::blockRelocPlan* /*request*/, ::proxy_proto::blockRelocReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_checkStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_checkStep() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::proxy_proto::AskIfSuccess, ::proxy_proto::RepIfSuccess>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proxy_proto::AskIfSuccess* request, ::proxy_proto::RepIfSuccess* response) { return this->checkStep(context, request, response); }));}
    void SetMessageAllocatorFor_checkStep(
        ::grpc::MessageAllocator< ::proxy_proto::AskIfSuccess, ::proxy_proto::RepIfSuccess>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proxy_proto::AskIfSuccess, ::proxy_proto::RepIfSuccess>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_checkStep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkStep(::grpc::ServerContext* /*context*/, const ::proxy_proto::AskIfSuccess* /*request*/, ::proxy_proto::RepIfSuccess* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* checkStep(
      ::grpc::CallbackServerContext* /*context*/, const ::proxy_proto::AskIfSuccess* /*request*/, ::proxy_proto::RepIfSuccess* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_checkalive<WithCallbackMethod_encodeAndSetObject<WithCallbackMethod_decodeAndGetObject<WithCallbackMethod_deleteBlock<WithCallbackMethod_mainRecal<WithCallbackMethod_helpRecal<WithCallbackMethod_blockReloc<WithCallbackMethod_checkStep<Service > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_checkalive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_checkalive() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_checkalive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkalive(::grpc::ServerContext* /*context*/, const ::proxy_proto::CheckaliveCMD* /*request*/, ::proxy_proto::RequestResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_encodeAndSetObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_encodeAndSetObject() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_encodeAndSetObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status encodeAndSetObject(::grpc::ServerContext* /*context*/, const ::proxy_proto::ObjectAndPlacement* /*request*/, ::proxy_proto::SetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_decodeAndGetObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_decodeAndGetObject() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_decodeAndGetObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status decodeAndGetObject(::grpc::ServerContext* /*context*/, const ::proxy_proto::ObjectAndPlacement* /*request*/, ::proxy_proto::GetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_deleteBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_deleteBlock() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_deleteBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteBlock(::grpc::ServerContext* /*context*/, const ::proxy_proto::NodeAndBlock* /*request*/, ::proxy_proto::DelReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_mainRecal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_mainRecal() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_mainRecal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status mainRecal(::grpc::ServerContext* /*context*/, const ::proxy_proto::mainRecalPlan* /*request*/, ::proxy_proto::RecalReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_helpRecal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_helpRecal() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_helpRecal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status helpRecal(::grpc::ServerContext* /*context*/, const ::proxy_proto::helpRecalPlan* /*request*/, ::proxy_proto::RecalReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_blockReloc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_blockReloc() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_blockReloc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status blockReloc(::grpc::ServerContext* /*context*/, const ::proxy_proto::blockRelocPlan* /*request*/, ::proxy_proto::blockRelocReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_checkStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_checkStep() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_checkStep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkStep(::grpc::ServerContext* /*context*/, const ::proxy_proto::AskIfSuccess* /*request*/, ::proxy_proto::RepIfSuccess* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_checkalive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_checkalive() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_checkalive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkalive(::grpc::ServerContext* /*context*/, const ::proxy_proto::CheckaliveCMD* /*request*/, ::proxy_proto::RequestResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcheckalive(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_encodeAndSetObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_encodeAndSetObject() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_encodeAndSetObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status encodeAndSetObject(::grpc::ServerContext* /*context*/, const ::proxy_proto::ObjectAndPlacement* /*request*/, ::proxy_proto::SetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestencodeAndSetObject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_decodeAndGetObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_decodeAndGetObject() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_decodeAndGetObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status decodeAndGetObject(::grpc::ServerContext* /*context*/, const ::proxy_proto::ObjectAndPlacement* /*request*/, ::proxy_proto::GetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdecodeAndGetObject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_deleteBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_deleteBlock() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_deleteBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteBlock(::grpc::ServerContext* /*context*/, const ::proxy_proto::NodeAndBlock* /*request*/, ::proxy_proto::DelReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_mainRecal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_mainRecal() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_mainRecal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status mainRecal(::grpc::ServerContext* /*context*/, const ::proxy_proto::mainRecalPlan* /*request*/, ::proxy_proto::RecalReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestmainRecal(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_helpRecal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_helpRecal() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_helpRecal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status helpRecal(::grpc::ServerContext* /*context*/, const ::proxy_proto::helpRecalPlan* /*request*/, ::proxy_proto::RecalReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequesthelpRecal(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_blockReloc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_blockReloc() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_blockReloc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status blockReloc(::grpc::ServerContext* /*context*/, const ::proxy_proto::blockRelocPlan* /*request*/, ::proxy_proto::blockRelocReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestblockReloc(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_checkStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_checkStep() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_checkStep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkStep(::grpc::ServerContext* /*context*/, const ::proxy_proto::AskIfSuccess* /*request*/, ::proxy_proto::RepIfSuccess* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcheckStep(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_checkalive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_checkalive() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->checkalive(context, request, response); }));
    }
    ~WithRawCallbackMethod_checkalive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkalive(::grpc::ServerContext* /*context*/, const ::proxy_proto::CheckaliveCMD* /*request*/, ::proxy_proto::RequestResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* checkalive(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_encodeAndSetObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_encodeAndSetObject() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->encodeAndSetObject(context, request, response); }));
    }
    ~WithRawCallbackMethod_encodeAndSetObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status encodeAndSetObject(::grpc::ServerContext* /*context*/, const ::proxy_proto::ObjectAndPlacement* /*request*/, ::proxy_proto::SetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* encodeAndSetObject(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_decodeAndGetObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_decodeAndGetObject() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->decodeAndGetObject(context, request, response); }));
    }
    ~WithRawCallbackMethod_decodeAndGetObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status decodeAndGetObject(::grpc::ServerContext* /*context*/, const ::proxy_proto::ObjectAndPlacement* /*request*/, ::proxy_proto::GetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* decodeAndGetObject(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_deleteBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_deleteBlock() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->deleteBlock(context, request, response); }));
    }
    ~WithRawCallbackMethod_deleteBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteBlock(::grpc::ServerContext* /*context*/, const ::proxy_proto::NodeAndBlock* /*request*/, ::proxy_proto::DelReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deleteBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_mainRecal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_mainRecal() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->mainRecal(context, request, response); }));
    }
    ~WithRawCallbackMethod_mainRecal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status mainRecal(::grpc::ServerContext* /*context*/, const ::proxy_proto::mainRecalPlan* /*request*/, ::proxy_proto::RecalReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* mainRecal(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_helpRecal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_helpRecal() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->helpRecal(context, request, response); }));
    }
    ~WithRawCallbackMethod_helpRecal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status helpRecal(::grpc::ServerContext* /*context*/, const ::proxy_proto::helpRecalPlan* /*request*/, ::proxy_proto::RecalReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* helpRecal(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_blockReloc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_blockReloc() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->blockReloc(context, request, response); }));
    }
    ~WithRawCallbackMethod_blockReloc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status blockReloc(::grpc::ServerContext* /*context*/, const ::proxy_proto::blockRelocPlan* /*request*/, ::proxy_proto::blockRelocReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* blockReloc(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_checkStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_checkStep() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->checkStep(context, request, response); }));
    }
    ~WithRawCallbackMethod_checkStep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkStep(::grpc::ServerContext* /*context*/, const ::proxy_proto::AskIfSuccess* /*request*/, ::proxy_proto::RepIfSuccess* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* checkStep(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_checkalive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_checkalive() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proxy_proto::CheckaliveCMD, ::proxy_proto::RequestResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proxy_proto::CheckaliveCMD, ::proxy_proto::RequestResult>* streamer) {
                       return this->Streamedcheckalive(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_checkalive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status checkalive(::grpc::ServerContext* /*context*/, const ::proxy_proto::CheckaliveCMD* /*request*/, ::proxy_proto::RequestResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcheckalive(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proxy_proto::CheckaliveCMD,::proxy_proto::RequestResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_encodeAndSetObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_encodeAndSetObject() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proxy_proto::ObjectAndPlacement, ::proxy_proto::SetReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proxy_proto::ObjectAndPlacement, ::proxy_proto::SetReply>* streamer) {
                       return this->StreamedencodeAndSetObject(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_encodeAndSetObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status encodeAndSetObject(::grpc::ServerContext* /*context*/, const ::proxy_proto::ObjectAndPlacement* /*request*/, ::proxy_proto::SetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedencodeAndSetObject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proxy_proto::ObjectAndPlacement,::proxy_proto::SetReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_decodeAndGetObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_decodeAndGetObject() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proxy_proto::ObjectAndPlacement, ::proxy_proto::GetReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proxy_proto::ObjectAndPlacement, ::proxy_proto::GetReply>* streamer) {
                       return this->StreameddecodeAndGetObject(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_decodeAndGetObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status decodeAndGetObject(::grpc::ServerContext* /*context*/, const ::proxy_proto::ObjectAndPlacement* /*request*/, ::proxy_proto::GetReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddecodeAndGetObject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proxy_proto::ObjectAndPlacement,::proxy_proto::GetReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_deleteBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_deleteBlock() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proxy_proto::NodeAndBlock, ::proxy_proto::DelReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proxy_proto::NodeAndBlock, ::proxy_proto::DelReply>* streamer) {
                       return this->StreameddeleteBlock(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_deleteBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status deleteBlock(::grpc::ServerContext* /*context*/, const ::proxy_proto::NodeAndBlock* /*request*/, ::proxy_proto::DelReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddeleteBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proxy_proto::NodeAndBlock,::proxy_proto::DelReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_mainRecal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_mainRecal() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proxy_proto::mainRecalPlan, ::proxy_proto::RecalReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proxy_proto::mainRecalPlan, ::proxy_proto::RecalReply>* streamer) {
                       return this->StreamedmainRecal(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_mainRecal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status mainRecal(::grpc::ServerContext* /*context*/, const ::proxy_proto::mainRecalPlan* /*request*/, ::proxy_proto::RecalReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedmainRecal(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proxy_proto::mainRecalPlan,::proxy_proto::RecalReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_helpRecal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_helpRecal() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proxy_proto::helpRecalPlan, ::proxy_proto::RecalReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proxy_proto::helpRecalPlan, ::proxy_proto::RecalReply>* streamer) {
                       return this->StreamedhelpRecal(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_helpRecal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status helpRecal(::grpc::ServerContext* /*context*/, const ::proxy_proto::helpRecalPlan* /*request*/, ::proxy_proto::RecalReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedhelpRecal(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proxy_proto::helpRecalPlan,::proxy_proto::RecalReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_blockReloc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_blockReloc() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proxy_proto::blockRelocPlan, ::proxy_proto::blockRelocReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proxy_proto::blockRelocPlan, ::proxy_proto::blockRelocReply>* streamer) {
                       return this->StreamedblockReloc(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_blockReloc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status blockReloc(::grpc::ServerContext* /*context*/, const ::proxy_proto::blockRelocPlan* /*request*/, ::proxy_proto::blockRelocReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedblockReloc(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proxy_proto::blockRelocPlan,::proxy_proto::blockRelocReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_checkStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_checkStep() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proxy_proto::AskIfSuccess, ::proxy_proto::RepIfSuccess>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proxy_proto::AskIfSuccess, ::proxy_proto::RepIfSuccess>* streamer) {
                       return this->StreamedcheckStep(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_checkStep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status checkStep(::grpc::ServerContext* /*context*/, const ::proxy_proto::AskIfSuccess* /*request*/, ::proxy_proto::RepIfSuccess* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcheckStep(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proxy_proto::AskIfSuccess,::proxy_proto::RepIfSuccess>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_checkalive<WithStreamedUnaryMethod_encodeAndSetObject<WithStreamedUnaryMethod_decodeAndGetObject<WithStreamedUnaryMethod_deleteBlock<WithStreamedUnaryMethod_mainRecal<WithStreamedUnaryMethod_helpRecal<WithStreamedUnaryMethod_blockReloc<WithStreamedUnaryMethod_checkStep<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_checkalive<WithStreamedUnaryMethod_encodeAndSetObject<WithStreamedUnaryMethod_decodeAndGetObject<WithStreamedUnaryMethod_deleteBlock<WithStreamedUnaryMethod_mainRecal<WithStreamedUnaryMethod_helpRecal<WithStreamedUnaryMethod_blockReloc<WithStreamedUnaryMethod_checkStep<Service > > > > > > > > StreamedService;
};

}  // namespace proxy_proto


#endif  // GRPC_proxy_2eproto__INCLUDED
